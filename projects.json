[
  {
    "name": "Instagram clone App",
    "description": "Instagram app",
    "_id": "270b24bc-8f66-4f20-86e4-d66810c68f6d",
    "createdAt": "2025-06-02T07:08:09.439Z",
    "umlDiagrams": {
      "class": "classDiagram\n    class User {\n        +String name\n        +String email\n        +List~String~ dietaryPreferences\n        +List~String~ dislikedIngredients\n        +Integer cookingTime\n        +List~String~ favoriteCuisines\n        +register(): void\n        +login(): boolean\n        +updateProfile(): void\n    }\n    class MealPlan {\n        +Date weekStarting\n        +List~Recipe~ recipes\n        +generatePlan(): void\n    }\n    class Recipe {\n        +String title\n        +List~String~ ingredients\n        +List~String~ instructions\n        +String cuisine\n        +Integer prepTime\n        +Integer cookTime\n        +Integer servings\n        +Map~String, Integer~ nutritionInfo\n        +rateRecipe(rating: Integer): void\n    }\n    class ShoppingList {\n        +List~String~ items\n        +Boolean isPurchased\n        +addToShoppingList(item: String): void\n        +removeFromShoppingList(item: String): void\n    }\n    class Pantry {\n        +List~String~ availableIngredients\n        +addIngredient(ingredient: String): void\n        +removeIngredient(ingredient: String): void\n    }\n    class AIEngine {\n        +String preferenceModel\n        +String dietaryRestrictionModel\n        +generateRecommendations(): List~Recipe~\n    }\n    class GroceryDeliveryIntegration {\n        +String serviceName\n        +orderItems(items: List~String~): void\n    }\n    class NutritionTracker {\n        +Map~String, Integer~ calorieIntake\n        +Map~String, Integer~ macros\n        +trackMeal(meal: String, quantity: Integer): void\n    }\n    class VoiceGuidedCooking {\n        +startGuidance(): void\n        +pauseGuidance(): void\n        +resumeGuidance(): void\n    }\n    \n    User \"1\" -- \"1\" MealPlan\n    User \"1\" -- \"*\" Recipe : rates >\n    MealPlan \"1\" -- \"*\" Recipe\n    User \"1\" -- \"1\" ShoppingList\n    User \"1\" -- \"1\" Pantry\n    MealPlan ..> AIEngine : generates using >\n    Recipe \"1\" -- \"1\" NutritionTracker : contains >\n    User \"1\" -- \"1\" GroceryDeliveryIntegration : uses >\n    Recipe \"1\" -- \"1\" VoiceGuidedCooking : uses >",
      "sequence": "sequenceDiagram\n    participant U as User\n    participant AI as AIEngine\n    participant MP as MealPlan\n    participant R as Recipe\n    participant SL as ShoppingList\n    participant GD as GroceryDeliveryIntegration\n\n    U->>+AI: SubmitPreferences()\n    AI->>+MP: GenerateMealPlan()\n    MP->>+R: SelectRecipes()\n    R-->>-MP: RecipesList\n    MP-->>-U: MealPlan\n    U->>+SL: GenerateShoppingList()\n    SL->>+R: GetIngredients()\n    R-->>-SL: ShoppingItems\n    U->>+GD: OrderGroceries()\n    GD->>+SL: FetchShoppingList()\n    SL-->>-GD: ShoppingItems\n    GD-->>-U: ConfirmOrder()",
      "entity": "erDiagram\n    USER ||--o{ MEAL_PLAN : \"has\"\n    MEAL_PLAN ||--|{ RECIPE : \"includes\"\n    RECIPE ||--o{ INGREDIENT : \"requires\"\n    USER ||--o{ SHOPPING_LIST : \"creates\"\n    SHOPPING_LIST ||--|{ ITEM : \"contains\"\n    USER ||--o{ PANTRY : \"owns\"\n    PANTRY ||--|{ INGREDIENT : \"stores\"\n    RECIPE ||--o{ NUTRITION_INFO : \"provides\"\n    USER ||--o{ NUTRITION_TRACKER : \"utilizes\"\n    NUTRITION_TRACKER ||--|{ MACROS : \"tracks\"\n    NUTRITION_TRACKER ||--|{ CALORIES : \"tracks\"",
      "component": "flowchart TB\n    subgraph Client\n        MobileApp[Mobile App]\n        WebApp[Web App]\n    end\n    subgraph Backend\n        AuthService[Authentication Service]\n        UserProfService[User Profile Service]\n        AIEngine[AI Engine]\n        MealPlanService[Meal Plan Service]\n        RecipeService[Recipe Service]\n        NutritionService[Nutrition Tracking Service]\n        GroceryService[Grocery Delivery Integration]\n    end\n    subgraph External\n        GroceryAPI[Grocery Delivery API]\n        NutriAPI[Nutrition Database API]\n    end\n    \n    MobileApp --> AuthService\n    WebApp --> AuthService\n    AuthService --> UserProfService\n    MobileApp --> AIEngine\n    WebApp --> AIEngine\n    AIEngine --> MealPlanService\n    MealPlanService --> RecipeService\n    MobileApp --> NutritionService\n    WebApp --> NutritionService\n    MobileApp --> GroceryService\n    WebApp --> GroceryService\n    GroceryService --> GroceryAPI\n    NutritionService --> NutriAPI",
      "architecture": "architecture-beta\n    group frontend(logos:aws-amplify)[Frontend]\n        service webapp(logos:aws-amplify)[Web App] in frontend\n        service mobileapp(logos:aws-amplify)[Mobile App] in frontend\n        \n    group backend(logos:aws-lambda)[Backend]\n        service authservice(logos:aws-cognito)[Authentication Service] in backend\n        service userprofile(logos:aws-dynamodb)[User Profile Service] in backend\n        service aien(logos:aws-sagemaker)[AI Engine] in backend\n        service mealplanservice(logos:aws-lambda)[Meal Plan Service] in backend\n        service recipeservice(logos:aws-lambda)[Recipe Service] in backend\n        service nutrition(logos:aws-lambda)[Nutrition Tracking Service] in backend\n        service grocerydelivery(logos:aws-lambda)[Grocery Delivery Integration] in backend\n        \n    group external(logos:internet)[External APIs]\n        service groceryapi(logos:internet)[Grocery Delivery API] in external\n        service nutritionapi(logos:internet)[Nutrition Database API] in external\n    \n    webapp:R --> L:authservice\n    mobileapp:R --> L:authservice\n    authservice:R --> L:userprofile\n    webapp:R --> B:aien\n    mobileapp:R --> B:aien\n    aien:R --> L:mealplanservice\n    mealplanservice:R --> L:recipeservice\n    webapp:R --> L:nutrition\n    mobileapp:R --> L:nutrition\n    webapp:R --> L:grocerydelivery\n    mobileapp:R --> L:grocerydelivery\n    grocerydelivery:R --> L:groceryapi\n    nutrition:R --> L:nutritionapi"
    },
    "documentation": {
      "id": "81bb5f48-0cd4-4576-85c0-0db4f19ebb85",
      "projectId": "270b24bc-8f66-4f20-86e4-d66810c68f6d",
      "prompt": "MealMuse is an intelligent meal planning app that uses AI to generate personalized recipes and weekly plans based on your taste preferences, dietary restrictions, and available ingredients. Whether you're vegan, keto, diabetic, or just trying to eat healthier, MealMuse adapts to your lifestyle in seconds. \n\nUsers begin by selecting their dietary goals, favorite cuisines, disliked ingredients, and how much time they usually have to cook. From there, MealMuse creates a tailored weekly menu, complete with easy-to-follow recipes, portion guidance, and a smart shopping list. The app also supports pantry syncing — input what’s in your kitchen, and it recommends dishes you can cook right now.\n\nIntegrated calorie and macro tracking makes it a helpful tool for fitness and health goals. Plus, MealMuse learns with each use — the more you cook and rate meals, the better it gets at predicting what you'll love.\n\nAdditional features include integration with grocery delivery services, voice-guided cooking mode, and options for batch cooking or single servings.\n\nMealMuse is not just a recipe app — it’s your AI-powered kitchen companion designed to save time, reduce food waste, and make healthy eating intuitive, personalized, and enjoyable.",
      "umlDiagrams": {
        "classDiagram": "classDiagram\n    class User {\n        +String name\n        +String email\n        +List~String~ dietaryPreferences\n        +List~String~ dislikedIngredients\n        +Integer cookingTime\n        +List~String~ favoriteCuisines\n        +register(): void\n        +login(): boolean\n        +updateProfile(): void\n    }\n    class MealPlan {\n        +Date weekStarting\n        +List~Recipe~ recipes\n        +generatePlan(): void\n    }\n    class Recipe {\n        +String title\n        +List~String~ ingredients\n        +List~String~ instructions\n        +String cuisine\n        +Integer prepTime\n        +Integer cookTime\n        +Integer servings\n        +Map~String, Integer~ nutritionInfo\n        +rateRecipe(rating: Integer): void\n    }\n    class ShoppingList {\n        +List~String~ items\n        +Boolean isPurchased\n        +addToShoppingList(item: String): void\n        +removeFromShoppingList(item: String): void\n    }\n    class Pantry {\n        +List~String~ availableIngredients\n        +addIngredient(ingredient: String): void\n        +removeIngredient(ingredient: String): void\n    }\n    class AIEngine {\n        +String preferenceModel\n        +String dietaryRestrictionModel\n        +generateRecommendations(): List~Recipe~\n    }\n    class GroceryDeliveryIntegration {\n        +String serviceName\n        +orderItems(items: List~String~): void\n    }\n    class NutritionTracker {\n        +Map~String, Integer~ calorieIntake\n        +Map~String, Integer~ macros\n        +trackMeal(meal: String, quantity: Integer): void\n    }\n    class VoiceGuidedCooking {\n        +startGuidance(): void\n        +pauseGuidance(): void\n        +resumeGuidance(): void\n    }\n    \n    User \"1\" -- \"1\" MealPlan\n    User \"1\" -- \"*\" Recipe : rates >\n    MealPlan \"1\" -- \"*\" Recipe\n    User \"1\" -- \"1\" ShoppingList\n    User \"1\" -- \"1\" Pantry\n    MealPlan ..> AIEngine : generates using >\n    Recipe \"1\" -- \"1\" NutritionTracker : contains >\n    User \"1\" -- \"1\" GroceryDeliveryIntegration : uses >\n    Recipe \"1\" -- \"1\" VoiceGuidedCooking : uses >",
        "sequenceDiagram": "sequenceDiagram\n    participant U as User\n    participant AI as AIEngine\n    participant MP as MealPlan\n    participant R as Recipe\n    participant SL as ShoppingList\n    participant GD as GroceryDeliveryIntegration\n\n    U->>+AI: SubmitPreferences()\n    AI->>+MP: GenerateMealPlan()\n    MP->>+R: SelectRecipes()\n    R-->>-MP: RecipesList\n    MP-->>-U: MealPlan\n    U->>+SL: GenerateShoppingList()\n    SL->>+R: GetIngredients()\n    R-->>-SL: ShoppingItems\n    U->>+GD: OrderGroceries()\n    GD->>+SL: FetchShoppingList()\n    SL-->>-GD: ShoppingItems\n    GD-->>-U: ConfirmOrder()",
        "entityDiagram": "erDiagram\n    USER ||--o{ MEAL_PLAN : \"has\"\n    MEAL_PLAN ||--|{ RECIPE : \"includes\"\n    RECIPE ||--o{ INGREDIENT : \"requires\"\n    USER ||--o{ SHOPPING_LIST : \"creates\"\n    SHOPPING_LIST ||--|{ ITEM : \"contains\"\n    USER ||--o{ PANTRY : \"owns\"\n    PANTRY ||--|{ INGREDIENT : \"stores\"\n    RECIPE ||--o{ NUTRITION_INFO : \"provides\"\n    USER ||--o{ NUTRITION_TRACKER : \"utilizes\"\n    NUTRITION_TRACKER ||--|{ MACROS : \"tracks\"\n    NUTRITION_TRACKER ||--|{ CALORIES : \"tracks\"",
        "componentDiagram": "flowchart TB\n    subgraph Client\n        MobileApp[Mobile App]\n        WebApp[Web App]\n    end\n    subgraph Backend\n        AuthService[Authentication Service]\n        UserProfService[User Profile Service]\n        AIEngine[AI Engine]\n        MealPlanService[Meal Plan Service]\n        RecipeService[Recipe Service]\n        NutritionService[Nutrition Tracking Service]\n        GroceryService[Grocery Delivery Integration]\n    end\n    subgraph External\n        GroceryAPI[Grocery Delivery API]\n        NutriAPI[Nutrition Database API]\n    end\n    \n    MobileApp --> AuthService\n    WebApp --> AuthService\n    AuthService --> UserProfService\n    MobileApp --> AIEngine\n    WebApp --> AIEngine\n    AIEngine --> MealPlanService\n    MealPlanService --> RecipeService\n    MobileApp --> NutritionService\n    WebApp --> NutritionService\n    MobileApp --> GroceryService\n    WebApp --> GroceryService\n    GroceryService --> GroceryAPI\n    NutritionService --> NutriAPI",
        "architectureDiagram": "architecture-beta\n    group frontend(logos:aws-amplify)[Frontend]\n        service webapp(logos:aws-amplify)[Web App] in frontend\n        service mobileapp(logos:aws-amplify)[Mobile App] in frontend\n        \n    group backend(logos:aws-lambda)[Backend]\n        service authservice(logos:aws-cognito)[Authentication Service] in backend\n        service userprofile(logos:aws-dynamodb)[User Profile Service] in backend\n        service aien(logos:aws-sagemaker)[AI Engine] in backend\n        service mealplanservice(logos:aws-lambda)[Meal Plan Service] in backend\n        service recipeservice(logos:aws-lambda)[Recipe Service] in backend\n        service nutrition(logos:aws-lambda)[Nutrition Tracking Service] in backend\n        service grocerydelivery(logos:aws-lambda)[Grocery Delivery Integration] in backend\n        \n    group external(logos:internet)[External APIs]\n        service groceryapi(logos:internet)[Grocery Delivery API] in external\n        service nutritionapi(logos:internet)[Nutrition Database API] in external\n    \n    webapp:R --> L:authservice\n    mobileapp:R --> L:authservice\n    authservice:R --> L:userprofile\n    webapp:R --> B:aien\n    mobileapp:R --> B:aien\n    aien:R --> L:mealplanservice\n    mealplanservice:R --> L:recipeservice\n    webapp:R --> L:nutrition\n    mobileapp:R --> L:nutrition\n    webapp:R --> L:grocerydelivery\n    mobileapp:R --> L:grocerydelivery\n    grocerydelivery:R --> L:groceryapi\n    nutrition:R --> L:nutritionapi"
      },
      "status": "completed",
      "progress": 100,
      "createdAt": "2025-06-02T07:09:00.483Z",
      "updatedAt": "2025-06-04T06:55:21.926Z",
      "result": "# MealMuse System Design Document\n\n## Executive Summary\nMealMuse is an AI-powered meal planning application designed to provide personalized meal recommendations based on users' dietary preferences, restrictions, available ingredients, and health goals. It aims to simplify meal planning, grocery shopping, and cooking processes, making healthy eating accessible and enjoyable. This document outlines the proposed architecture, API contracts, security considerations, and deployment strategy for MealMuse.\n\n## Goals and Non-Goals\n### Goals\n- Provide personalized meal plans and recipes.\n- Support dietary restrictions and preferences.\n- Integrate with grocery delivery services.\n- Offer calorie and macro tracking.\n- Learn and adapt to user feedback.\n\n### Non-Goals\n- Real-time nutritionist support.\n- Physical grocery store integration.\n- In-app cooking classes.\n\n## Proposed Architecture\n### Components\n- **Frontend**: Mobile and Web Applications for user interaction.\n- **Backend Services**:\n  - **Authentication Service**: Manages user authentication and authorization.\n  - **User Profile Service**: Stores user preferences, dietary restrictions, and profile information.\n  - **AI Engine**: Generates personalized meal plans and recipes.\n  - **Meal Plan Service**: Manages weekly meal plans.\n  - **Recipe Service**: Stores and retrieves recipes.\n  - **Nutrition Tracking Service**: Tracks calorie and macro intake.\n  - **Grocery Delivery Integration**: Interfaces with external grocery delivery services.\n- **External APIs**:\n  - **Grocery Delivery API**: Connects to grocery delivery partners.\n  - **Nutrition Database API**: Provides detailed nutrition information for recipes.\n\n### Data Models\n- **User**: Stores name, email, dietary preferences, disliked ingredients, cooking time, and favorite cuisines.\n- **MealPlan**: Contains a list of recipes for the week.\n- **Recipe**: Includes title, ingredients, instructions, cuisine, prep and cook time, servings, and nutrition info.\n- **ShoppingList**: Lists items to be purchased, tracking purchased status.\n- **Pantry**: Tracks available ingredients in the user's kitchen.\n\n### Integrations\n- **Grocery Delivery Services**: Allows users to order ingredients directly from the app.\n- **Nutrition Databases**: Provides accurate nutrition information for all recipes.\n\n## API Contracts\n### User Profile Management\n- **POST /user/register**\n  - Request: `{ \"name\": \"John Doe\", \"email\": \"john@example.com\", \"password\": \"securePassword123\" }`\n  - Response: `{ \"userId\": \"123\", \"name\": \"John Doe\", \"email\": \"john@example.com\" }`\n- **POST /user/login**\n  - Request: `{ \"email\": \"john@example.com\", \"password\": \"securePassword123\" }`\n  - Response: `{ \"token\": \"jwt.token.here\" }`\n\n### Meal Plan Generation\n- **POST /mealplan/generate**\n  - Request: `{ \"userId\": \"123\", \"preferences\": { \"dietary\": [\"vegan\"], \"dislikedIngredients\": [\"nuts\"], \"cookingTime\": 30 } }`\n  - Response: `{ \"weekStarting\": \"2023-01-01\", \"recipes\": [{ \"title\": \"Vegan Curry\", ... }] }`\n\n## Security Considerations\n- Use HTTPS for all communications.\n- Implement OAuth2 for authentication and authorization.\n- Store passwords securely using salted hashes.\n- Regularly audit and update dependencies for security vulnerabilities.\n\n## Failure Handling & Resilience\n- Implement circuit breakers for external API calls.\n- Use retries with exponential backoff for transient failures.\n- Deploy services across multiple availability zones for high availability.\n\n## Observability Plan\n- **Logging**: Use structured logging for all backend services.\n- **Monitoring**: Implement metrics for API response times, error rates, and system health.\n- **Alerting**: Set up alerts for critical issues like service downtime or abnormal usage patterns.\n\n## Cost Estimation\n- Based on initial projections, the monthly cost for cloud services (AWS) is estimated to be around $2,000, considering compute, storage, and API request volumes.\n\n## Deployment Infrastructure\n- **Cloud Provider**: AWS\n- **Compute**: AWS Lambda for serverless functions.\n- **Storage**: Amazon DynamoDB for NoSQL storage.\n- **API Gateway**: For managing and securing API endpoints.\n\n## Rollout Plan\n1. **Beta Testing**: Invite a limited number of users to test core features.\n2. **Feedback Incorporation**: Adjust features based on user feedback.\n3. **Phased Rollout**: Gradually increase the user base, monitoring for scalability issues.\n4. **General Availability**: Open the app to the public with full features.\n\n## Risks & Tradeoffs\n- **AI Model Accuracy**: The effectiveness of meal recommendations depends on the AI model's accuracy, which will improve over time with more data.\n- **Integration Dependencies**: Reliance on external services for grocery delivery and nutrition data introduces potential points of failure.\n\n## Open Questions\n- How will we ensure the AI engine remains unbiased in its recommendations?\n- What strategies can be employed to engage users continuously and encourage feedback?\n\n## Appendix\n- UML Diagrams and additional technical specifications can be found in the supplementary materials section."
    },
    "prompt": "MealMuse is an intelligent meal planning app that uses AI to generate personalized recipes and weekly plans based on your taste preferences, dietary restrictions, and available ingredients. Whether you're vegan, keto, diabetic, or just trying to eat healthier, MealMuse adapts to your lifestyle in seconds. \n\nUsers begin by selecting their dietary goals, favorite cuisines, disliked ingredients, and how much time they usually have to cook. From there, MealMuse creates a tailored weekly menu, complete with easy-to-follow recipes, portion guidance, and a smart shopping list. The app also supports pantry syncing — input what’s in your kitchen, and it recommends dishes you can cook right now.\n\nIntegrated calorie and macro tracking makes it a helpful tool for fitness and health goals. Plus, MealMuse learns with each use — the more you cook and rate meals, the better it gets at predicting what you'll love.\n\nAdditional features include integration with grocery delivery services, voice-guided cooking mode, and options for batch cooking or single servings.\n\nMealMuse is not just a recipe app — it’s your AI-powered kitchen companion designed to save time, reduce food waste, and make healthy eating intuitive, personalized, and enjoyable. ",
    "infraCode": "// main.tf\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\n# Authentication Service - Cognito\nresource \"aws_cognito_user_pool\" \"meal_muse_user_pool\" {\n  name = \"MealMuseUserPool\"\n}\n\nresource \"aws_cognito_user_pool_client\" \"meal_muse_user_pool_client\" {\n  name                        = \"MealMuseUserPoolClient\"\n  user_pool_id                = aws_cognito_user_pool.meal_muse_user_pool.id\n  explicit_auth_flows         = [\"ALLOW_USER_SRP_AUTH\", \"ALLOW_REFRESH_TOKEN_AUTH\"]\n  generate_secret             = false\n}\n\n# User Profile Service - DynamoDB\nresource \"aws_dynamodb_table\" \"user_profile\" {\n  name           = \"UserProfile\"\n  billing_mode   = \"PAY_PER_REQUEST\"\n  hash_key       = \"email\"\n\n  attribute {\n    name = \"email\"\n    type = \"S\"\n  }\n}\n\n# AI Engine - SageMaker\nresource \"aws_sagemaker_model\" \"ai_engine\" {\n  name = \"MealMuseAIEngine\"\n  // SageMaker model configuration details would be specified here\n}\n\n# Lambda Functions\nresource \"aws_lambda_function\" \"meal_plan_service\" {\n  function_name = \"MealPlanService\"\n  handler       = \"index.handler\"\n  runtime       = \"nodejs14.x\"\n  role          = aws_iam_role.lambda_exec.arn\n  // Additional configuration\n}\n\nresource \"aws_lambda_function\" \"recipe_service\" {\n  function_name = \"RecipeService\"\n  handler       = \"index.handler\"\n  runtime       = \"nodejs14.x\"\n  role          = aws_iam_role.lambda_exec.arn\n  // Additional configuration\n}\n\nresource \"aws_lambda_function\" \"nutrition_tracking_service\" {\n  function_name = \"NutritionTrackingService\"\n  handler       = \"index.handler\"\n  runtime       = \"nodejs14.x\"\n  role          = aws_iam_role.lambda_exec.arn\n  // Additional configuration\n}\n\nresource \"aws_lambda_function\" \"grocery_delivery_integration\" {\n  function_name = \"GroceryDeliveryIntegration\"\n  handler       = \"index.handler\"\n  runtime       = \"nodejs14.x\"\n  role          = aws_iam_role.lambda_exec.arn\n  // Additional configuration\n}\n\n# IAM Role for Lambda Execution\nresource \"aws_iam_role\" \"lambda_exec\" {\n  name = \"lambda_execution_role\"\n\n  assume_role_policy = <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n    \"Action\": \"sts:AssumeRole\",\n    \"Principal\": {\n      \"Service\": \"lambda.amazonaws.com\"\n    },\n    \"Effect\": \"Allow\",\n    \"Sid\": \"\"\n  }]\n}\nEOF\n}\n\n# Permissions for Lambda to access other AWS services\nresource \"aws_iam_policy\" \"lambda_policy\" {\n  name   = \"LambdaAccessPolicy\"\n  policy = <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"dynamodb:*\",\n        \"sagemaker:*\",\n        \"s3:*\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\nEOF\n}\n\nresource \"aws_iam_role_policy_attachment\" \"lambda_policy_attach\" {\n  role       = aws_iam_role.lambda_exec.name\n  policy_arn = aws_iam_policy.lambda_policy.arn\n}\n\n# variables.tf\n# Define variables used in the configurations\n\n# outputs.tf\n# Define outputs for the Terraform configuration\n",
    "appCode": {
      "frontend": {
        "components": {
          "Header": "import React from 'react';\n\nfunction Header() {\n  return (\n    <header>\n      <h1>MealMuse</h1>\n    </header>\n  );\n}\n\nexport default Header;",
          "Footer": "import React from 'react';\n\nfunction Footer() {\n  return (\n    <footer>\n      <p>© 2023 MealMuse, Inc.</p>\n    </footer>\n  );\n}\n\nexport default Footer;",
          "UserProfileForm": "import React, { useState } from 'react';\n\nfunction UserProfileForm({ onSubmit }) {\n  const [profile, setProfile] = useState({ dietaryPreferences: [], dislikedIngredients: [], cookingTime: 30, favoriteCuisines: [] });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setProfile({ ...profile, [name]: value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(profile);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* Form fields here */}\n      <button type='submit'>Submit</button>\n    </form>\n  );\n}\n\nexport default UserProfileForm;"
        },
        "pages": {
          "Home": "import React from 'react';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\n\nfunction Home() {\n  return (\n    <div>\n      <Header />\n      <main>\n        <h2>Welcome to MealMuse</h2>\n        {/* Additional content here */}\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default Home;",
          "UserProfile": "import React from 'react';\nimport UserProfileForm from '../components/UserProfileForm';\nimport { updateUserProfile } from '../utils/api';\n\nfunction UserProfile() {\n  const handleSubmit = (profile) => {\n    updateUserProfile(profile).then(() => {\n      // Handle success\n    }).catch((error) => {\n      // Handle error\n    });\n  };\n\n  return (\n    <div>\n      <h2>User Profile</h2>\n      <UserProfileForm onSubmit={handleSubmit} />\n    </div>\n  );\n}\n\nexport default UserProfile;"
        },
        "utils": {
          "api": "import axios from 'axios';\n\nconst API_ENDPOINT = 'http://localhost:4000';\n\nexport const updateUserProfile = async (profile) => {\n  try {\n    const response = await axios.post(`${API_ENDPOINT}/user/profile`, profile);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};"
        }
      },
      "backend": {
        "controllers": {
          "UserController": "const UserModel = require('../models/UserModel');\n\nexports.updateUserProfile = async (req, res) => {\n  try {\n    const updatedUser = await UserModel.update(req.body);\n    res.json(updatedUser);\n  } catch (error) {\n    res.status(500).send(error.message);\n  }\n};"
        },
        "models": {
          "UserModel": "const db = require('../db');\n\nexports.update = async (userData) => {\n  // Update user logic here\n  return updatedUser;\n};"
        },
        "routes": {
          "userRoutes": "const express = require('express');\nconst router = express.Router();\nconst UserController = require('../controllers/UserController');\n\nrouter.post('/profile', UserController.updateUserProfile);\n\nmodule.exports = router;"
        },
        "utils": {
          "db": "const { MongoClient } = require('mongodb');\n\nconst url = 'mongodb://localhost:27017';\nconst dbName = 'mealMuse';\n\nconst client = new MongoClient(url);\n\nasync function connect() {\n  await client.connect();\n  console.log('Connected successfully to server');\n  const db = client.db(dbName);\n  return db;\n}\n\nmodule.exports = { connect };"
        }
      },
      "documentation": "To run the MealMuse app, you'll need to have Node.js and MongoDB installed on your machine. \n\n**Backend Setup**\n1. Navigate to the backend directory.\n2. Run `npm install` to install dependencies.\n3. Start MongoDB if it's not already running.\n4. Run `npm start` to start the server.\n\n**Frontend Setup**\n1. Navigate to the frontend directory.\n2. Run `npm install` to install dependencies.\n3. Run `npm start` to start the React app.\n\nYou can then navigate to `http://localhost:3000` in your browser to view the app."
    },
    "lastCode": "// main.tf\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\n# AWS Cognito for Authentication Service\nresource \"aws_cognito_user_pool\" \"meal_muse_user_pool\" {\n  name = \"meal_muse_user_pool\"\n}\n\nresource \"aws_cognito_user_pool_client\" \"meal_muse_user_pool_client\" {\n  name                        = \"meal_muse_user_pool_client\"\n  user_pool_id                = aws_cognito_user_pool.meal_muse_user_pool.id\n  generate_secret             = false\n  explicit_auth_flows         = [\"ADMIN_NO_SRP_AUTH\"]\n  supported_identity_providers = [\"COGNITO\"]\n}\n\n# DynamoDB for User Profile Service\nresource \"aws_dynamodb_table\" \"user_profiles\" {\n  name           = \"UserProfiles\"\n  billing_mode   = \"PROVISIONED\"\n  read_capacity  = 5\n  write_capacity = 5\n  hash_key       = \"userId\"\n\n  attribute {\n    name = \"userId\"\n    type = \"S\"\n  }\n}\n\n# AWS Lambda for Backend Services\nresource \"aws_lambda_function\" \"ai_engine\" {\n  function_name = \"AIEngine\"\n  handler       = \"index.handler\"\n  runtime       = \"python3.8\"\n  role          = aws_iam_role.ai_lambda_role.arn\n  source_code_hash = filebase64sha256(\"./lambda/ai_engine.zip\")\n}\n\nresource \"aws_lambda_function\" \"meal_plan_service\" {\n  function_name = \"MealPlanService\"\n  handler       = \"index.handler\"\n  runtime       = \"python3.8\"\n  role          = aws_iam_role.meal_plan_lambda_role.arn\n  source_code_hash = filebase64sha256(\"./lambda/meal_plan_service.zip\")\n}\n\nresource \"aws_lambda_function\" \"recipe_service\" {\n  function_name = \"RecipeService\"\n  handler       = \"index.handler\"\n  runtime       = \"python3.8\"\n  role          = aws_iam_role.recipe_lambda_role.arn\n  source_code_hash = filebase64sha256(\"./lambda/recipe_service.zip\")\n}\n\nresource \"aws_lambda_function\" \"nutrition_tracking_service\" {\n  function_name = \"NutritionTrackingService\"\n  handler       = \"index.handler\"\n  runtime       = \"python3.8\"\n  role          = aws_iam_role.nutrition_lambda_role.arn\n  source_code_hash = filebase64sha256(\"./lambda/nutrition_tracking_service.zip\")\n}\n\nresource \"aws_lambda_function\" \"grocery_delivery_integration\" {\n  function_name = \"GroceryDeliveryIntegration\"\n  handler       = \"index.handler\"\n  runtime       = \"python3.8\"\n  role          = aws_iam_role.grocery_lambda_role.arn\n  source_code_hash = filebase64sha256(\"./lambda/grocery_delivery_integration.zip\")\n}\n\n# IAM Roles for Lambda Functions\nresource \"aws_iam_role\" \"ai_lambda_role\" {\n  name = \"ai_lambda_execution_role\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [{\n      Action = \"sts:AssumeRole\",\n      Principal = {\n        Service = \"lambda.amazonaws.com\"\n      },\n      Effect = \"Allow\",\n      Sid = \"\"\n    }]\n  })\n}\n\nresource \"aws_iam_role\" \"meal_plan_lambda_role\" {\n  name = \"meal_plan_lambda_execution_role\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [{\n      Action = \"sts:AssumeRole\",\n      Principal = {\n        Service = \"lambda.amazonaws.com\"\n      },\n      Effect = \"Allow\",\n      Sid = \"\"\n    }]\n  })\n}\n\nresource \"aws_iam_role\" \"recipe_lambda_role\" {\n  name = \"recipe_lambda_execution_role\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [{\n      Action = \"sts:AssumeRole\",\n      Principal = {\n        Service = \"lambda.amazonaws.com\"\n      },\n      Effect = \"Allow\",\n      Sid = \"\"\n    }]\n  })\n}\n\nresource \"aws_iam_role\" \"nutrition_lambda_role\" {\n  name = \"nutrition_lambda_execution_role\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [{\n      Action = \"sts:AssumeRole\",\n      Principal = {\n        Service = \"lambda.amazonaws.com\"\n      },\n      Effect = \"Allow\",\n      Sid = \"\"\n    }]\n  })\n}\n\nresource \"aws_iam_role\" \"grocery_lambda_role\" {\n  name = \"grocery_lambda_execution_role\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [{\n      Action = \"sts:AssumeRole\",\n      Principal = {\n        Service = \"lambda.amazonaws.com\"\n      },\n      Effect = \"Allow\",\n      Sid = \"\"\n    }]\n  })\n}\n\n// variables.tf\nvariable \"region\" {\n  description = \"The AWS region to deploy MealMuse infrastructure.\"\n  type        = string\n  default     = \"us-east-1\"\n}\n"
  },
  {
    "name": "Zeppelin Sneaker",
    "description": "",
    "_id": "11b63a92-674d-4b2a-9031-0ad9ff7aee46",
    "createdAt": "2025-06-17T18:18:36.616Z",
    "prompt": "Create a online sneaker brand website with sneaker drop and other e-commerce shopping features using AWS",
    "umlDiagrams": {
      "class": "classDiagram\n    class Sneaker {\n        +id: int\n        +name: string\n        +price: float\n        +size: int\n        +color: string\n        +stock: int\n        +getImage(): string\n    }\n    class User {\n        +id: int\n        +name: string\n        +email: string\n        +password: string\n        +addToCart(sneaker: Sneaker): boolean\n        +purchase(): Order\n    }\n    class ShoppingCart {\n        +items: Sneaker[]\n        +userId: int\n        +addItem(sneaker: Sneaker, quantity: int): void\n        +removeItem(sneaker: Sneaker): void\n        +checkout(): Order\n    }\n    class Order {\n        +id: int\n        +userId: int\n        +items: Sneaker[]\n        +totalPrice: float\n        +status: string\n        +createTimestamp: datetime\n        +updateTimestamp: datetime\n    }\n    class PaymentService {\n        +orderId: int\n        +processPayment(order: Order): boolean\n    }\n    class InventoryService {\n        +sneakerId: int\n        +updateStock(sneaker: Sneaker, quantity: int): boolean\n    }\n\n    User --> ShoppingCart\n    ShoppingCart \"1\" -- \"*\" Sneaker\n    ShoppingCart --> Order\n    User \"1\" -- \"*\" Order\n    Order --> PaymentService\n    Sneaker --> InventoryService",
      "sequence": "sequenceDiagram\n    participant User\n    participant WebApp\n    participant AuthService\n    participant InventoryService\n    participant PaymentService\n    participant OrderService\n\n    User->>+WebApp: Selects Sneakers\n    WebApp->>+AuthService: Validates User Session\n    AuthService-->>-WebApp: Session Valid\n    WebApp->>+InventoryService: Check Availability\n    InventoryService-->>-WebApp: Available\n    WebApp->>User: Displays Checkout\n    User->>+WebApp: Confirms Purchase\n    WebApp->>+PaymentService: Process Payment\n    PaymentService-->>-WebApp: Payment Successful\n    WebApp->>+OrderService: Create Order\n    OrderService-->>-WebApp: Order Confirmed\n    WebApp-->>User: Display Order Confirmation",
      "component": "flowchart TB\n    subgraph Frontend\n        WebApp[Web Application]\n        MobileApp[Mobile Application]\n    end\n    subgraph Backend\n        AuthService[Authentication Service]\n        InventoryService[Inventory Service]\n        PaymentService[Payment Service]\n        OrderService[Order Management Service]\n        APIService[API Gateway]\n    end\n    subgraph Database\n        UserDB[(User Database)]\n        SneakerDB[(Sneaker Database)]\n        OrderDB[(Order Database)]\n    end\n    WebApp --> APIService\n    MobileApp --> APIService\n    APIService --> AuthService\n    APIService --> InventoryService\n    APIService --> PaymentService\n    APIService --> OrderService\n    AuthService --> UserDB\n    InventoryService --> SneakerDB\n    OrderService --> OrderDB\n    OrderService --> SneakerDB\n    PaymentService --> OrderDB",
      "architecture": "architecture-beta\n    group frontend(logos:aws-amplify)[Frontend]\n        service webapp(logos:aws-amplify)[Web App] in frontend\n        service mobileapp(logos:aws-amplify)[Mobile App] in frontend\n    group backend(logos:aws-lambda)[Backend]\n        service auth_service(logos:aws-cognito)[Authentication Service] in backend\n        service inventory_service(logos:aws-lambda)[Inventory Service] in backend\n        service payment_service(logos:aws-lambda)[Payment Service] in backend\n        service order_service(logos:aws-lambda)[Order Management Service] in backend\n        service api_gateway(logos:aws-api-gateway)[API Gateway] in backend\n    group db(logos:aws-rds)[Database]\n        service userdb(logos:aws-rds)[User Database] in db\n        service sneakerdb(logos:aws-dynamodb)[Sneaker Database] in db\n        service orderdb(logos:aws-rds)[Order Database] in db\n    group storage(logos:aws-s3)[Storage]\n        service images(logos:aws-s3)[Image Storage] in storage\n    group monitoring(logos:aws-cloudwatch)[Monitoring]\n        service cloudwatch(logos:aws-cloudwatch)[CloudWatch] in monitoring\n\n    webapp:R --> L:api_gateway\n    mobileapp:R --> L:api_gateway\n    api_gateway:R --> L:auth_service\n    api_gateway:R --> L:inventory_service\n    api_gateway:R --> L:payment_service\n    api_gateway:R --> L:order_service\n    auth_service:R --> L:userdb\n    inventory_service:R --> L:sneakerdb\n    order_service:R --> L:orderdb\n    order_service:R --> L:sneakerdb\n    payment_service:R --> L:orderdb\n    inventory_service:R --> L:images"
    },
    "documentation": {
      "id": "f902459c-ec3f-420a-a88e-9bb1715f81bf",
      "projectId": "11b63a92-674d-4b2a-9031-0ad9ff7aee46",
      "prompt": "Create a online sneaker brand website with sneaker drop and other e-commerce shopping features using AWS",
      "umlDiagrams": {
        "classDiagram": "classDiagram\n  class Sneaker {\n    +id: int\n    +name: string\n    +price: float\n    +stockQuantity: int\n    +getAvailability(): boolean\n  }\n  class User {\n    +id: int\n    +email: string\n    +password: string\n    +login(): boolean\n    +register(email: string, password: string): User\n  }\n  class ShoppingCart {\n    +userId: int\n    +items: Sneaker[]\n    +addItem(sneaker: Sneaker): void\n    +removeItem(sneakerId: int): boolean\n    +checkout(): Order\n  }\n  class Order {\n    +id: int\n    +userId: int\n    +items: Sneaker[]\n    +totalPrice: float\n    +status: string\n    +placeOrder(): boolean\n    +cancelOrder(): boolean\n  }\n  class Payment {\n    +orderId: int\n    +pay(amount: float): boolean\n    +refund(amount: float): boolean\n  }\n  \n  User -- ShoppingCart\n  ShoppingCart \"1\" -- \"*\" Sneaker\n  User \"1\" -- \"*\" Order\n  Order \"*\" -- \"1\" Payment",
        "sequenceDiagram": "sequenceDiagram\n  participant User\n  participant ShoppingCart\n  participant PaymentService\n  participant InventoryService\n  participant OrderService\n\n  User->>ShoppingCart: add items\n  User->>ShoppingCart: checkout()\n  ShoppingCart->>OrderService: create order\n  OrderService->>PaymentService: initiate payment\n  PaymentService->>User: request payment\n  User->>PaymentService: complete payment\n  PaymentService->>OrderService: confirm payment\n  OrderService->>InventoryService: update stock\n  OrderService-->>User: confirm order",
        "entityDiagram": "erDiagram\n  USER {\n    int id PK\n    string email\n    string password\n  }\n  SNEAKER {\n    int id PK\n    string name\n    float price\n    int stockQuantity\n  }\n  ORDER {\n    int id PK\n    int userId FK\n    float totalPrice\n    string status\n  }\n  ORDER_ITEM {\n    int id PK\n    int orderId FK\n    int sneakerId FK\n    int quantity\n  }\n  PAYMENT {\n    int id PK\n    int orderId FK\n    float amount\n    string status\n  }\n\n  USER ||--o{ ORDER : places\n  ORDER ||--|{ ORDER_ITEM : contains\n  SNEAKER ||--o{ ORDER_ITEM : ordered_in\n  ORDER ||--|| PAYMENT : pays",
        "componentDiagram": "flowchart TB\n  subgraph Frontend\n    WebApp[Web Application]\n  end\n  subgraph Backend\n    AuthService[Authentication Service]\n    ProductService[Product Service]\n    ShoppingCartService[Shopping Cart Service]\n    OrderService[Order Management Service]\n    PaymentService[Payment Service]\n  end\n  subgraph Database\n    DB[(Database)]\n  end\n  subgraph ExternalServices\n    PaymentGateway[Payment Gateway]\n  end\n\n  WebApp --> AuthService\n  WebApp --> ProductService\n  WebApp --> ShoppingCartService\n  WebApp --> OrderService\n  AuthService --> DB\n  ProductService --> DB\n  ShoppingCartService --> DB\n  OrderService --> DB\n  OrderService --> PaymentService\n  PaymentService --> PaymentGateway\n  PaymentGateway --> PaymentService",
        "architectureDiagram": "architecture-beta\n  group frontend(cloud)[Frontend]\n    service webApp(logos:aws-amplify)[Web App] in frontend\n  group backend(cloud)[Backend]\n    service authService(logos:aws-cognito)[Authentication Service] in backend\n    service productService(logos:aws-lambda)[Product Service] in backend\n    service cartService(logos:aws-lambda)[Shopping Cart Service] in backend\n    service orderService(logos:aws-lambda)[Order Service] in backend\n    service paymentService(logos:aws-lambda)[Payment Service] in backend\n  group db(database)[Database]\n    service dbInstance(logos:aws-rds)[RDS Instance] in db\n  group externalService(cloud)[External Services]\n    service paymentGateway(internet)[Payment Gateway] in externalService\n\n  webApp:R --> L:authService\n  webApp:R --> L:productService\n  webApp:R --> L:cartService\n  webApp:R --> L:orderService\n  authService:R --> L:dbInstance\n  productService:R --> L:dbInstance\n  cartService:R --> L:dbInstance\n  orderService:R --> L:dbInstance\n  orderService:R --> L:paymentService\n  paymentService:R --> L:paymentGateway"
      },
      "status": "completed",
      "progress": 100,
      "createdAt": "2025-06-17T18:33:55.013Z",
      "updatedAt": "2025-06-17T18:34:40.814Z",
      "result": "# Online Sneaker Brand Website System Design Document\n\n## Executive Summary\n\nThis document outlines the system design for an online sneaker brand website, focusing on sneaker drops and e-commerce shopping features. The system leverages AWS services to ensure scalability, reliability, and performance. The design includes detailed architecture, API contracts, security considerations, and deployment strategies to provide a comprehensive overview for technical stakeholders and engineers involved in the project.\n\n## Goals and Non-Goals\n\n### Goals\n\n- Implement a scalable and secure online platform for sneaker sales.\n- Support sneaker drops with high traffic handling capabilities.\n- Provide a seamless shopping experience with features like shopping carts and order management.\n- Integrate payment processing for secure transactions.\n\n### Non-Goals\n\n- Building a physical store presence.\n- Expanding to non-sneaker products at this stage.\n\n## Proposed Architecture\n\n### Components\n\n- **Frontend**\n  - Web Application: Developed with React, hosted on AWS Amplify for scalability and ease of deployment.\n- **Backend Services**\n  - Authentication Service: AWS Cognito for user management and authentication.\n  - Product Service: AWS Lambda function to manage sneaker inventory.\n  - Shopping Cart Service: AWS Lambda function for managing user shopping carts.\n  - Order Management Service: AWS Lambda function for order processing and status tracking.\n  - Payment Service: AWS Lambda function to handle payment transactions.\n- **Database**\n  - RDS Instance: PostgreSQL database for storing user, product, order, and transaction data.\n- **External Services**\n  - Payment Gateway: Integration with Stripe or PayPal for processing payments.\n\n### Data Models\n\n- **User**: Stores user credentials and profile information.\n- **Sneaker**: Contains details about sneakers, including stock quantity.\n- **ShoppingCart**: Links users to their selected items and quantities.\n- **Order**: Records details of transactions, including user, items, and payment status.\n- **Payment**: Tracks payment transactions linked to orders.\n\n### Integrations\n\n- **Payment Gateway Integration**: Securely process payments through external payment services.\n- **Email Service Integration**: AWS SES for sending order confirmations and promotional emails.\n\n## API Contracts\n\n### Endpoints\n\n- **User Authentication**\n  - `POST /auth/register`: Register a new user.\n  - `POST /auth/login`: Authenticate a user.\n- **Product Management**\n  - `GET /products`: List all sneakers.\n  - `GET /products/{id}`: Get a specific sneaker's details.\n- **Shopping Cart**\n  - `POST /cart/add`: Add an item to the cart.\n  - `POST /cart/remove`: Remove an item from the cart.\n- **Order Management**\n  - `POST /order/checkout`: Process the checkout and create an order.\n  - `GET /order/{id}`: Get order details.\n\n### Request/Response Examples\n\n- **Add Item to Cart**\n  - Request: `POST /cart/add`\n    ```json\n    {\n      \"userId\": 1,\n      \"sneakerId\": 101,\n      \"quantity\": 2\n    }\n    ```\n  - Response:\n    ```json\n    {\n      \"status\": \"success\",\n      \"message\": \"Item added to cart.\"\n    }\n    ```\n\n## Security Considerations\n\n- Implement HTTPS for all API endpoints.\n- Use AWS Cognito for secure authentication and authorization.\n- Store sensitive data encrypted in the database.\n- Integrate AWS WAF for web application firewall protection.\n\n## Failure Handling & Resilience\n\n- Use AWS Lambda with automatic scaling to handle traffic spikes.\n- Implement database replication and backups for data durability.\n- Utilize Amazon CloudWatch for monitoring and alerts on system health.\n- Design services to be stateless where possible to improve fault tolerance.\n\n## Observability Plan\n\n- **Logging**: Use Amazon CloudWatch for logging all application and infrastructure logs.\n- **Monitoring**: Implement dashboards in CloudWatch for real-time monitoring of system metrics.\n- **Alerting**: Set up alerts for critical metrics thresholds (e.g., error rates, latency).\n\n## Cost Estimation\n\n- Provide a detailed cost estimate based on AWS pricing for Lambda, RDS, Amplify, Cognito, SES, and CloudWatch. Consider request volumes, storage needs, and data transfer costs.\n\n## Deployment Infrastructure\n\n- Utilize AWS CloudFormation or Terraform for infrastructure as code to automate the deployment of AWS resources.\n- Implement CI/CD pipelines using AWS CodePipeline and CodeBuild for automated testing and deployment.\n\n## Rollout Plan\n\n- **Phase 1**: Deploy a beta version for internal testing.\n- **Phase 2**: Conduct a limited public beta to gather user feedback.\n- **Phase 3**: Full public launch after incorporating feedback and final testing.\n\n## Risks & Tradeoffs\n\n- **Scalability vs. Cost**: Balancing the scalability needs with cost constraints, especially during sneaker drops.\n- **Security**: Ensuring data protection and secure transactions while maintaining user experience.\n\n## Open Questions\n\n- What are the specific requirements for sneaker drop events in terms of traffic and inventory management?\n- Are there any specific legal or compliance requirements for selling sneakers online in different regions?\n\n## Appendix\n\n- UML Diagrams for class, sequence, entity, component, and architecture provided in the initial project description."
    },
    "infraCode": "// variables.tf\nvariable \"region\" {\n  description = \"The AWS region to deploy resources\"\n  type        = string\n  default     = \"us-east-1\"\n}\n\nvariable \"project_name\" {\n  description = \"The project name\"\n  type        = string\n  default     = \"sneaker-brand\"\n}\n\n// provider.tf\nprovider \"aws\" {\n  region = var.region\n}\n\n// iam_roles.tf\nresource \"aws_iam_role\" \"lambda_execution_role\" {\n  name = \"lambda_execution_role\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [{\n      Action = \"sts:AssumeRole\",\n      Principal = {\n        Service = \"lambda.amazonaws.com\"\n      },\n      Effect = \"Allow\",\n      Sid = \"\"\n    }]\n  })\n\n  inline_policy {\n    name = \"access_policy\"\n    policy = jsonencode({\n      Version = \"2012-10-17\",\n      Statement = [\n        {\n          Action: [\n            \"dynamodb:GetItem\",\n            \"dynamodb:PutItem\",\n            \"dynamodb:UpdateItem\",\n            \"dynamodb:Scan\",\n            \"dynamodb:Query\",\n            \"s3:GetObject\",\n            \"s3:PutObject\",\n            \"rds-db:connect\"\n          ],\n          Effect: \"Allow\",\n          Resource: \"*\"\n        }\n      ]\n    })\n  }\n}\n\n// s3.tf\nresource \"aws_s3_bucket\" \"image_storage\" {\n  bucket = \"${var.project_name}-images\"\n  acl    = \"private\"\n\n  versioning {\n    enabled = true\n  }\n}\n\n// dynamodb.tf\nresource \"aws_dynamodb_table\" \"sneaker_table\" {\n  name           = \"Sneakers\"\n  billing_mode   = \"PAY_PER_REQUEST\"\n  hash_key       = \"id\"\n\n  attribute {\n    name = \"id\"\n    type = \"N\"\n  }\n\n  attribute {\n    name = \"name\"\n    type = \"S\"\n  }\n}\n\n// cognito.tf\nresource \"aws_cognito_user_pool\" \"user_pool\" {\n  name = \"${var.project_name}-user-pool\"\n}\n\nresource \"aws_cognito_user_pool_client\" \"user_pool_client\" {\n  name                                 = \"${var.project_name}-app-client\"\n  user_pool_id                         = aws_cognito_user_pool.user_pool.id\n  generate_secret                      = false\n  allowed_oauth_flows                  = [\"code\", \"implicit\"]\n  allowed_oauth_scopes                 = [\"email\", \"openid\"]\n  callback_urls                       = [\"https://myapp.com/callback\"]\n  logout_urls                          = [\"https://myapp.com/logout\"]\n}\n\n// api_gateway.tf\nresource \"aws_api_gateway_rest_api\" \"api_gateway\" {\n  name = \"${var.project_name}-api\"\n}\n\nresource \"aws_api_gateway_resource\" \"auth_resource\" {\n  rest_api_id = aws_api_gateway_rest_api.api_gateway.id\n  parent_id   = aws_api_gateway_rest_api.api_gateway.root_resource_id\n  path_part   = \"auth\"\n}\n\nresource \"aws_api_gateway_method\" \"auth_post\" {\n  rest_api_id   = aws_api_gateway_rest_api.api_gateway.id\n  resource_id   = aws_api_gateway_resource.auth_resource.id\n  http_method   = \"POST\"\n  authorization = \"NONE\"\n}\n\nresource \"aws_api_gateway_integration\" \"auth_integration\" {\n  rest_api_id = aws_api_gateway_rest_api.api_gateway.id\n  resource_id = aws_api_gateway_resource.auth_resource.id\n  http_method = aws_api_gateway_method.auth_post.http_method\n  type        = \"AWS_PROXY\"\n  uri         = \"arn:aws:apigateway:${var.region}:lambda:path/2015-03-31/functions/${aws_lambda_function.auth_lambda_function.arn}/invocations\"\n}\n\n// lambda.tf\nresource \"aws_lambda_function\" \"auth_lambda_function\" {\n  function_name = \"AuthFunction\"\n\n  s3_bucket = aws_s3_bucket.image_storage.bucket\n  s3_key    = \"lambda-zips/auth-lambda.zip\"\n\n  handler = \"index.handler\"\n  runtime = \"nodejs12.x\"\n\n  role = aws_iam_role.lambda_execution_role.arn\n}\n\n// rds.tf\nresource \"aws_db_instance\" \"user_db\" {\n  allocated_storage    = 20\n  storage_type         = \"gp2\"\n  engine               = \"mysql\"\n  engine_version       = \"5.7\"\n  instance_class       = \"db.t2.micro\"\n  name                 = \"userdb\"\n  username             = \"admin\"\n  password             = \"password\"\n  parameter_group_name = \"default.mysql5.7\"\n}\n\n// cloudwatch.tf\nresource \"aws_cloudwatch_log_group\" \"api_log_group\" {\n  name = \"/aws/api_gateway/${var.project_name}\"\n}\n\n// amplify.tf\nresource \"aws_amplify_app\" \"web_app\" {\n  name = \"${var.project_name}-web\"\n  repository = \"https://github.com/example/sneaker-brand-web.git\"\n}\n\nresource \"aws_amplify_app\" \"mobile_app\" {\n  name = \"${var.project_name}-mobile\"\n  repository = \"https://github.com/example/sneaker-brand-mobile.git\"\n}",
    "appCode": {
      "frontend": {
        "components": {
          "Navbar": "import React from 'react';\n\nfunction Navbar() {\n  return (\n    <nav>\n      <ul>\n        <li><a href='/'>Home</a></li>\n        <li><a href='/sneakers'>Sneakers</a></li>\n        <li><a href='/cart'>Cart</a></li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Navbar;",
          "SneakerCard": "import React from 'react';\n\nfunction SneakerCard({ sneaker }) {\n  return (\n    <div>\n      <img src={sneaker.getImage()} alt={sneaker.name} />\n      <h3>{sneaker.name}</h3>\n      <p>${sneaker.price}</p>\n      <button>Add to Cart</button>\n    </div>\n  );\n}\n\nexport default SneakerCard;",
          "Cart": "import React from 'react';\n\nfunction Cart({ cartItems }) {\n  return (\n    <div>\n      <h2>Shopping Cart</h2>\n      {cartItems.map((item) => (\n        <div key={item.id}>\n          <h4>{item.name}</h4>\n          <p>Quantity: {item.quantity}</p>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Cart;"
        },
        "pages": {
          "HomePage": "import React from 'react';\nimport Navbar from '../components/Navbar';\n\nfunction HomePage() {\n  return (\n    <div>\n      <Navbar />\n      <h1>Welcome to Our Sneaker Store</h1>\n    </div>\n  );\n}\n\nexport default HomePage;",
          "SneakerPage": "import React, { useState, useEffect } from 'react';\nimport Navbar from '../components/Navbar';\nimport SneakerCard from '../components/SneakerCard';\nimport { fetchSneakers } from '../utils/api';\n\nfunction SneakerPage() {\n  const [sneakers, setSneakers] = useState([]);\n\n  useEffect(() => {\n    fetchSneakers().then(setSneakers);\n  }, []);\n\n  return (\n    <div>\n      <Navbar />\n      <div>\n        {sneakers.map((sneaker) => (\n          <SneakerCard key={sneaker.id} sneaker={sneaker} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default SneakerPage;"
        },
        "utils": {
          "api": "export async function fetchSneakers() {\n  const response = await fetch('/api/sneakers');\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}"
        }
      },
      "backend": {
        "controllers": {
          "SneakerController": "const Sneaker = require('../models/Sneaker');\n\nexports.getAllSneakers = async (req, res) => {\n  try {\n    const sneakers = await Sneaker.find();\n    res.json(sneakers);\n  } catch (error) {\n    res.status(500).send(error);\n  }\n};"
        },
        "models": {
          "Sneaker": "const mongoose = require('mongoose');\n\nconst sneakerSchema = new mongoose.Schema({\n  name: String,\n  price: Number,\n  size: Number,\n  color: String,\n  stock: Number\n});\n\nmodule.exports = mongoose.model('Sneaker', sneakerSchema);"
        },
        "routes": {
          "sneakerRoutes": "const express = require('express');\nconst router = express.Router();\nconst { getAllSneakers } = require('../controllers/SneakerController');\n\nrouter.get('/sneakers', getAllSneakers);\n\nmodule.exports = router;"
        },
        "utils": {
          "dbConnect": "const mongoose = require('mongoose');\n\nconst connectDB = async () => {\n  try {\n    await mongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true });\n    console.log('MongoDB Connected...');\n  } catch (error) {\n    console.error('MongoDB Connection Error:', error);\n    process.exit(1);\n  }\n};\n\nmodule.exports = connectDB;"
        }
      },
      "documentation": "To run the application:\n1. Frontend:\n   - Navigate to the frontend directory.\n   - Run 'npm install' to install dependencies.\n   - Run 'npm start' to start the development server.\n   - The application should now be running on http://localhost:3000.\n2. Backend:\n   - Navigate to the backend directory.\n   - Run 'npm install' to install dependencies.\n   - Create a .env file and set MONGODB_URI to your MongoDB connection string.\n   - Run 'npm run dev' to start the server.\n   - The API should now be accessible on http://localhost:5000.\n\nNote: Ensure AWS services are configured as per the infrastructure code provided."
    }
  }
]