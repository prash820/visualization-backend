
> visualization-backend@1.0.0 start
> node dist/server.js

[Memory] Setting up cleanup for diagramJobs (maxAge: 1200000ms, maxJobs: 50)
[Memory] Setting up cleanup for iacJobs (maxAge: 1800000ms, maxJobs: 50)
In IAC
[Memory] Setting up cleanup for infrastructureJobs (maxAge: 2700000ms, maxJobs: 30)
[Memory] Setting up cleanup for applicationJobs (maxAge: 1800000ms, maxJobs: 30)
[Memory] Setting up cleanup for umlJobs (maxAge: 3600000ms, maxJobs: 100)
[Memory] Setting up cleanup for conceptJobs (maxAge: 2400000ms, maxJobs: 25)
[Memory] Setting up cleanup for appCreationJobs (maxAge: 3600000ms, maxJobs: 20)
ðŸš€ Starting Chart AI Visualization Backend...
ðŸ§  Initializing memory management...
[Memory Startup] Used: 17MB, RSS: 70MB, Heap: 17/32MB
âœ… Server running on port 5001
ðŸ“Š Environment: development
[Memory Server Started] Used: 17MB, RSS: 71MB, Heap: 17/32MB
ðŸš€ Starting Terraform FastAPI service...
[Terraform Service Error] INFO:     Started server process [62627]
INFO:     Waiting for application startup.
[Terraform Service Error] INFO:     Application startup complete.
[Terraform Service Error] INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
[IaC] Job started: jobId=iac-1751918054713-xmk4sq, projectId=test-variable-fix
[IaC] Prompt: Create a simple task management app with frontend and backend
[IaC] OpenAI raw response for jobId=iac-1751918054713-xmk4sq: terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.0"
    }
  }
}

provider "aws" {
  region = "us-east-1"
}

resource "random_string" "suffix" {
  length  = 8
  special = false
}

resource "aws_s3_bucket" "frontend_bucket" {
  bucket_prefix = "task-app-frontend-${random_string.suffix.result}"
}

resource "aws_s3_bucket_website_configuration" "frontend" {
  bucket = aws_s3_bucket.frontend_bucket.id

  index_document {
    suffix = "index.html"
  }

  error_document {
    key = "index.html"
  }
}

resource "aws_s3_bucket_public_access_block" "frontend" {
  bucket = aws_s3_bucket.frontend_bucket.id

  block_public_acls       = false
  block_public_policy     = false
  ignore_public_acls      = false
  restrict_public_buckets = false
}

resource "aws_s3_bucket_policy" "frontend" {
  bucket = aws_s3_bucket.frontend_bucket.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = "*"
        Action = "s3:GetObject"
        Resource = "${aws_s3_bucket.frontend_bucket.arn}/*"
      }
    ]
  })
}

resource "aws_dynamodb_table" "tasks" {
  name         = "Tasks-${random_string.suffix.result}"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "TaskID"

  attribute {
    name = "TaskID"
    type = "S"
  }
}

data "archive_file" "lambda_zip" {
  type        = "zip"
  source_dir  = "lambda_function"
  output_path = "lambda_function.zip"
}

resource "aws_iam_role" "lambda_execution" {
  name = "lambda-execution-role-${random_string.suffix.result}"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy" "lambda_policy" {
  name   = "lambda-policy-${random_string.suffix.result}"
  role   = aws_iam_role.lambda_execution.id
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "dynamodb:PutItem",
          "dynamodb:GetItem",
          "dynamodb:Scan",
          "dynamodb:UpdateItem"
        ]
        Resource = aws_dynamodb_table.tasks.arn
      }
    ]
  })
}

resource "aws_lambda_function" "backend" {
  function_name = "task-backend-${random_string.suffix.result}"
  role          = aws_iam_role.lambda_execution.arn
  handler       = "index.handler"
  runtime       = "nodejs18.x"
  filename      = data.archive_file.lambda_zip.output_path
  source_code_hash = data.archive_file.lambda_zip.output_base64sha256
}

resource "aws_apigatewayv2_api" "http_api" {
  name          = "task-api-${random_string.suffix.result}"
  protocol_type = "HTTP"
}

resource "aws_apigatewayv2_integration" "lambda" {
  api_id             = aws_apigatewayv2_api.http_api.id
  integration_type   = "AWS_PROXY"
  integration_uri    = aws_lambda_function.backend.invoke_arn
  payload_format_version = "2.0"
}

resource "aws_apigatewayv2_route" "default" {
  api_id    = aws_apigatewayv2_api.http_api.id
  route_key = "ANY /{proxy+}"
  target    = "integrations/${aws_apigatewayv2_integration.lambda.id}"
}

resource "aws_lambda_permission" "apigw" {
  statement_id  = "AllowAPIGatewayInvoke"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.backend.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_apigatewayv2_api.http_api.execution_arn}/*"
}

resource "aws_apigatewayv2_stage" "default" {
  api_id      = aws_apigatewayv2_api.http_api.id
  name        = "$default"
  auto_deploy = true
}

output "frontend_url" {
  value = "http://${aws_s3_bucket.frontend_bucket.bucket}.s3-website-${provider.aws.region}.amazonaws.com"
}

output "api_endpoint" {
  value = aws_apigatewayv2_api.http_api.api_endpoint
}
[IaC] Cleaned terraformCode length: 3965
[IaC] Created project directory: /Users/prashanthboovaragavan/Documents/workspace/chart-app-fullstack/visualization-backend/terraform-runner/workspace/test-variable-fix
[IaC] Saved terraform.tf for projectId=test-variable-fix at /Users/prashanthboovaragavan/Documents/workspace/chart-app-fullstack/visualization-backend/terraform-runner/workspace/test-variable-fix
[Memory Monitor] Used: 16MB, RSS: 36MB, Heap: 16/19MB
[Memory Monitor] Used: 16MB, RSS: 36MB, Heap: 16/19MB
[Memory Monitor] Used: 16MB, RSS: 36MB, Heap: 16/19MB
[CORS] Allowing origin in development: http://localhost:3001
[CORS] Allowing origin in development: http://localhost:3001
[CORS] Allowing origin in development: http://localhost:3001
[CORS] Allowing origin in development: http://localhost:3001
[Memory Monitor] Used: 17MB, RSS: 36MB, Heap: 17/19MB
[Memory Monitor] Used: 17MB, RSS: 37MB, Heap: 17/19MB
[Memory Monitor] Used: 17MB, RSS: 36MB, Heap: 17/19MB
[Memory Monitor] Used: 17MB, RSS: 36MB, Heap: 17/19MB
[Memory Monitor] Used: 17MB, RSS: 36MB, Heap: 17/19MB
[Memory Monitor] Used: 17MB, RSS: 35MB, Heap: 17/19MB
[CORS] Allowing origin in development: http://localhost:3001
[CORS] Allowing origin in development: http://localhost:3001
[CORS] Allowing origin in development: http://localhost:3001
[CORS] Allowing origin in development: http://localhost:3001
