{
  "backendComponents": [
    {
      "name": "LambdaFunctions",
      "children": [
        "CalcFunction",
        "SciCalcFunction",
        "AuthFunction",
        "HistoryFunction"
      ],
      "description": "Lambda functions for handling various backend operations including calculations, authentication, and history logging."
    },
    {
      "name": "APIGateway",
      "children": [
        "APICalc",
        "APISciCalc",
        "APIAuth",
        "APIHistory"
      ],
      "description": "API Gateway endpoints for routing requests to the appropriate Lambda functions."
    },
    {
      "name": "Database",
      "children": [
        "DynamoDBCalc",
        "DynamoDBHistory"
      ],
      "description": "DynamoDB tables for storing calculation results and history logs."
    },
    {
      "name": "Middleware",
      "children": [
        "AuthMiddleware",
        "LoggingMiddleware"
      ],
      "description": "Middleware components for authentication and logging, applied to Lambda function requests."
    }
  ],
  "backendModels": [
    {
      "name": "DatabaseModel",
      "properties": [
        "expression: string",
        "result: number"
      ],
      "methods": [
        "saveCalculation(expression: string, result: number): void",
        "getCalculationHistory(): Calculation[]"
      ],
      "description": "Model for interacting with DynamoDB to save and retrieve calculation data."
    }
  ],
  "backendDependencies": [
    {
      "from": "LambdaHandler",
      "to": "ExpressionService",
      "type": "uses",
      "description": "LambdaHandler uses ExpressionService to evaluate mathematical expressions."
    },
    {
      "from": "LambdaHandler",
      "to": "ScientificNotationService",
      "type": "uses",
      "description": "LambdaHandler uses ScientificNotationService to convert numbers to and from scientific notation."
    },
    {
      "from": "LambdaHandler",
      "to": "AuthService",
      "type": "uses",
      "description": "LambdaHandler uses AuthService to validate authentication tokens."
    },
    {
      "from": "LambdaHandler",
      "to": "DatabaseModel",
      "type": "uses",
      "description": "LambdaHandler uses DatabaseModel to save calculation results and retrieve history."
    }
  ],
  "fileStructure": {
    "frontend": [],
    "backend": [
      {
        "path": "src/index.ts",
        "content": "",
        "dependencies": [
          "express",
          "serverless-http",
          "cors",
          "helmet",
          "morgan",
          "./routes",
          "./middleware/auth",
          "./middleware/logging"
        ],
        "description": "Lambda entry point with Express app wrapped in serverless-http, exports handler function for AWS Lambda deployment. Includes middleware setup, route registration, and error handling for Lambda context.",
        "type": "backend"
      },
      {
        "path": "src/services/CalculatorService.ts",
        "content": "",
        "dependencies": [
          "../models/DatabaseModel",
          "../utils/validation",
          "../middleware/auth"
        ],
        "description": "Service to handle calculator operations optimized for Lambda cold starts with proper error handling and validation.",
        "type": "backend"
      },
      {
        "path": "src/services/ScientificNotationService.ts",
        "content": "",
        "dependencies": [],
        "description": "Service for converting numbers to and from scientific notation, optimized for Lambda execution.",
        "type": "backend"
      },
      {
        "path": "src/services/AuthService.ts",
        "content": "",
        "dependencies": [],
        "description": "Service for validating authentication tokens, used by Lambda functions to secure API endpoints.",
        "type": "backend"
      },
      {
        "path": "src/models/DatabaseModel.ts",
        "content": "",
        "dependencies": [
          "aws-sdk"
        ],
        "description": "Model for interacting with DynamoDB to save and retrieve calculation data, optimized for serverless execution.",
        "type": "backend"
      },
      {
        "path": "src/routes/index.ts",
        "content": "",
        "dependencies": [
          "express",
          "../controllers/CalculatorController",
          "../controllers/AuthController"
        ],
        "description": "Express routes for API endpoints, mapping HTTP requests to the appropriate controllers.",
        "type": "backend"
      },
      {
        "path": "src/controllers/CalculatorController.ts",
        "content": "",
        "dependencies": [
          "../services/CalculatorService",
          "../services/ScientificNotationService"
        ],
        "description": "Controller for handling calculator-related API requests, coordinating between services and models.",
        "type": "backend"
      },
      {
        "path": "src/controllers/AuthController.ts",
        "content": "",
        "dependencies": [
          "../services/AuthService"
        ],
        "description": "Controller for handling authentication-related API requests, utilizing AuthService for token validation.",
        "type": "backend"
      },
      {
        "path": "src/middleware/auth.ts",
        "content": "",
        "dependencies": [
          "../services/AuthService"
        ],
        "description": "Middleware for authenticating requests using tokens, applied to secure API endpoints.",
        "type": "backend"
      },
      {
        "path": "src/middleware/logging.ts",
        "content": "",
        "dependencies": [
          "morgan"
        ],
        "description": "Middleware for logging HTTP requests, integrated with Express for Lambda execution.",
        "type": "backend"
      },
      {
        "path": "src/utils/validation.ts",
        "content": "",
        "dependencies": [],
        "description": "Utility functions for validating input data, used across services for ensuring data integrity.",
        "type": "backend"
      }
    ]
  },
  "integration": {
    "apiEndpoints": [
      {
        "path": "/api/calculator/calculate",
        "method": "POST",
        "frontendComponent": "",
        "backendService": "CalculatorService",
        "description": "Lambda API endpoint integration flow for performing calculations and returning results."
      },
      {
        "path": "/api/auth/validate",
        "method": "POST",
        "frontendComponent": "",
        "backendService": "AuthService",
        "description": "Lambda API endpoint for validating authentication tokens."
      }
    ],
    "dataFlow": [
      {
        "from": "CalculatorService",
        "to": "DatabaseModel",
        "data": "Calculation result and expression",
        "description": "Data flow from CalculatorService to DatabaseModel for saving calculation results in DynamoDB."
      },
      {
        "from": "AuthService",
        "to": "LambdaHandler",
        "data": "Token validation result",
        "description": "Data flow from AuthService to LambdaHandler for determining access to secured endpoints."
      }
    ]
  }
}