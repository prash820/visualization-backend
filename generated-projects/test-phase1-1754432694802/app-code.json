{
  "frontend": {
    "components": {
      "Header.tsx": "import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Header: React.FC = () => {\n  return (\n    <header className='bg-indigo-600 p-4 text-white'>\n      <div className='container mx-auto flex justify-between items-center'>\n        <h1 className='text-xl font-bold'>RemoteTask</h1>\n        <nav>\n          <Link to='/' className='mr-4'>Dashboard</Link>\n          <Link to='/tasks' className='mr-4'>Tasks</Link>\n          <Link to='/profile'>Profile</Link>\n        </nav>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;",
      "Sidebar.tsx": "import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Sidebar: React.FC = () => {\n  return (\n    <aside className='w-64 bg-gray-800 text-white h-full'>\n      <div className='p-4'>\n        <h2 className='text-lg font-bold'>Menu</h2>\n        <ul>\n          <li><Link to='/dashboard' className='block py-2'>Dashboard</Link></li>\n          <li><Link to='/tasks' className='block py-2'>Tasks</Link></li>\n          <li><Link to='/files' className='block py-2'>Files</Link></li>\n          <li><Link to='/settings' className='block py-2'>Settings</Link></li>\n        </ul>\n      </div>\n    </aside>\n  );\n};\n\nexport default Sidebar;",
      "Dashboard.tsx": "import React, { useEffect, useState } from 'react';\nimport { useApi } from '../hooks/useApi';\n\nconst Dashboard: React.FC = () => {\n  const { data, loading, error } = useApi('/api/dashboard');\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    if (data) {\n      setTasks(data.tasks);\n    }\n  }, [data]);\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  return (\n    <div className='p-4'>\n      <h2 className='text-2xl font-bold mb-4'>Dashboard</h2>\n      <div className='grid grid-cols-3 gap-4'>\n        {tasks.map(task => (\n          <div key={task.id} className='bg-white p-4 shadow rounded'>\n            <h3 className='text-lg font-bold'>{task.title}</h3>\n            <p>{task.description}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;",
      "TaskList.tsx": "import React from 'react';\nimport TaskItem from './TaskItem';\n\ninterface TaskListProps {\n  tasks: Array<{ id: string; title: string; description: string; status: string }>;\n}\n\nconst TaskList: React.FC<TaskListProps> = ({ tasks }) => {\n  return (\n    <div className='task-list'>\n      {tasks.map(task => (\n        <TaskItem key={task.id} task={task} />\n      ))}\n    </div>\n  );\n};\n\nexport default TaskList;",
      "TaskItem.tsx": "import React from 'react';\n\ninterface TaskItemProps {\n  task: { id: string; title: string; description: string; status: string };\n}\n\nconst TaskItem: React.FC<TaskItemProps> = ({ task }) => {\n  return (\n    <div className='task-item bg-white p-4 shadow rounded mb-4'>\n      <h3 className='text-lg font-bold'>{task.title}</h3>\n      <p>{task.description}</p>\n      <span className={`status ${task.status}`}>{task.status}</span>\n    </div>\n  );\n};\n\nexport default TaskItem;",
      "FileUpload.tsx": "import React, { useState } from 'react';\n\nconst FileUpload: React.FC = () => {\n  const [file, setFile] = useState<File | null>(null);\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      setFile(e.target.files[0]);\n    }\n  };\n\n  const handleUpload = () => {\n    if (!file) return;\n    // Upload logic here\n  };\n\n  return (\n    <div className='file-upload'>\n      <input type='file' onChange={handleFileChange} />\n      <button onClick={handleUpload} disabled={!file} className='bg-blue-500 text-white px-4 py-2 rounded'>\n        Upload\n      </button>\n    </div>\n  );\n};\n\nexport default FileUpload;",
      "ProgressTracker.tsx": "import React from 'react';\n\ninterface ProgressTrackerProps {\n  progress: number;\n}\n\nconst ProgressTracker: React.FC<ProgressTrackerProps> = ({ progress }) => {\n  return (\n    <div className='progress-tracker'>\n      <div className='w-full bg-gray-200 rounded-full h-4 mb-4'>\n        <div className='bg-green-500 h-4 rounded-full' style={{ width: `${progress}%` }}></div>\n      </div>\n      <span>{progress}% Complete</span>\n    </div>\n  );\n};\n\nexport default ProgressTracker;",
      "Login.tsx": "import React, { useState } from 'react';\nimport { useAuth } from '../hooks/useAuth';\n\nconst Login: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const { login, error, loading } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    await login(email, password);\n  };\n\n  return (\n    <div className='login-page'>\n      <form onSubmit={handleSubmit} className='bg-white p-6 rounded shadow-md'>\n        <h2 className='text-2xl font-bold mb-4'>Login</h2>\n        <input\n          type='email'\n          placeholder='Email'\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          className='block w-full mb-4 p-2 border rounded'\n        />\n        <input\n          type='password'\n          placeholder='Password'\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          className='block w-full mb-4 p-2 border rounded'\n        />\n        {error && <div className='text-red-500 mb-4'>{error}</div>}\n        <button type='submit' disabled={loading} className='bg-indigo-600 text-white px-4 py-2 rounded'>\n          {loading ? 'Logging in...' : 'Login'}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;",
      "Register.tsx": "import React, { useState } from 'react';\nimport { useAuth } from '../hooks/useAuth';\n\nconst Register: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [name, setName] = useState('');\n  const { register, error, loading } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    await register(email, password, name);\n  };\n\n  return (\n    <div className='register-page'>\n      <form onSubmit={handleSubmit} className='bg-white p-6 rounded shadow-md'>\n        <h2 className='text-2xl font-bold mb-4'>Register</h2>\n        <input\n          type='text'\n          placeholder='Name'\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          className='block w-full mb-4 p-2 border rounded'\n        />\n        <input\n          type='email'\n          placeholder='Email'\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          className='block w-full mb-4 p-2 border rounded'\n        />\n        <input\n          type='password'\n          placeholder='Password'\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          className='block w-full mb-4 p-2 border rounded'\n        />\n        {error && <div className='text-red-500 mb-4'>{error}</div>}\n        <button type='submit' disabled={loading} className='bg-indigo-600 text-white px-4 py-2 rounded'>\n          {loading ? 'Registering...' : 'Register'}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Register;",
      "Notification.tsx": "import React from 'react';\n\ninterface NotificationProps {\n  message: string;\n  type: 'success' | 'error' | 'info';\n}\n\nconst Notification: React.FC<NotificationProps> = ({ message, type }) => {\n  const bgColor = type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-blue-500';\n\n  return (\n    <div className={`notification ${bgColor} text-white p-4 rounded mb-4`}> {message} </div>\n  );\n};\n\nexport default Notification;",
      "SearchBar.tsx": "import React, { useState } from 'react';\n\ninterface SearchBarProps {\n  onSearch: (query: string) => void;\n}\n\nconst SearchBar: React.FC<SearchBarProps> = ({ onSearch }) => {\n  const [query, setQuery] = useState('');\n\n  const handleSearch = () => {\n    onSearch(query);\n  };\n\n  return (\n    <div className='search-bar flex items-center'>\n      <input\n        type='text'\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        className='border p-2 rounded-l'\n        placeholder='Search...'\n      />\n      <button onClick={handleSearch} className='bg-indigo-600 text-white p-2 rounded-r'>\n        Search\n      </button>\n    </div>\n  );\n};\n\nexport default SearchBar;",
      "Modal.tsx": "import React from 'react';\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n  children: React.ReactNode;\n}\n\nconst Modal: React.FC<ModalProps> = ({ isOpen, onClose, title, children }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className='modal fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center'>\n      <div className='bg-white p-6 rounded shadow-md w-1/3'>\n        <div className='flex justify-between items-center mb-4'>\n          <h2 className='text-xl font-bold'>{title}</h2>\n          <button onClick={onClose} className='text-red-500'>Close</button>\n        </div>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;"
    },
    "pages": {
      "HomePage.tsx": "import React from 'react';\nimport Header from '../components/Header';\nimport Dashboard from '../components/Dashboard';\n\nconst HomePage: React.FC = () => {\n  return (\n    <div>\n      <Header />\n      <main className='container mx-auto p-4'>\n        <Dashboard />\n      </main>\n    </div>\n  );\n};\n\nexport default HomePage;",
      "LoginPage.tsx": "import React from 'react';\nimport Login from '../components/Login';\n\nconst LoginPage: React.FC = () => {\n  return (\n    <div className='flex justify-center items-center min-h-screen bg-gray-100'>\n      <Login />\n    </div>\n  );\n};\n\nexport default LoginPage;",
      "DashboardPage.tsx": "import React from 'react';\nimport Header from '../components/Header';\nimport Sidebar from '../components/Sidebar';\nimport TaskList from '../components/TaskList';\n\nconst DashboardPage: React.FC = () => {\n  return (\n    <div className='flex'>\n      <Sidebar />\n      <div className='flex-1'>\n        <Header />\n        <main className='p-4'>\n          <TaskList tasks={[]} />\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardPage;",
      "ProfilePage.tsx": "import React from 'react';\nimport Header from '../components/Header';\n\nconst ProfilePage: React.FC = () => {\n  return (\n    <div>\n      <Header />\n      <main className='container mx-auto p-4'>\n        <h2 className='text-2xl font-bold mb-4'>Profile</h2>\n        {/* Profile details here */}\n      </main>\n    </div>\n  );\n};\n\nexport default ProfilePage;",
      "SettingsPage.tsx": "import React from 'react';\nimport Header from '../components/Header';\n\nconst SettingsPage: React.FC = () => {\n  return (\n    <div>\n      <Header />\n      <main className='container mx-auto p-4'>\n        <h2 className='text-2xl font-bold mb-4'>Settings</h2>\n        {/* Settings form here */}\n      </main>\n    </div>\n  );\n};\n\nexport default SettingsPage;",
      "NotFoundPage.tsx": "import React from 'react';\n\nconst NotFoundPage: React.FC = () => {\n  return (\n    <div className='flex justify-center items-center min-h-screen'>\n      <h1 className='text-4xl font-bold'>404 - Page Not Found</h1>\n    </div>\n  );\n};\n\nexport default NotFoundPage;"
    },
    "hooks": {
      "useAuth.ts": "import { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { authService } from '../services/authService';\n\nexport const useAuth = () => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const history = useHistory();\n\n  const login = async (email: string, password: string) => {\n    setLoading(true);\n    try {\n      const userData = await authService.login(email, password);\n      setUser(userData);\n      history.push('/dashboard');\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (email: string, password: string, name: string) => {\n    setLoading(true);\n    try {\n      const userData = await authService.register(email, password, name);\n      setUser(userData);\n      history.push('/dashboard');\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n    history.push('/login');\n  };\n\n  return { user, login, register, logout, loading, error };\n};",
      "useApi.ts": "import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport const useApi = (endpoint: string) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(endpoint);\n        setData(response.data);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [endpoint]);\n\n  return { data, loading, error };\n};",
      "useNotification.ts": "import { useState } from 'react';\n\nexport const useNotification = () => {\n  const [notifications, setNotifications] = useState([]);\n\n  const addNotification = (message, type) => {\n    setNotifications([...notifications, { message, type }]);\n  };\n\n  const removeNotification = (index) => {\n    setNotifications(notifications.filter((_, i) => i !== index));\n  };\n\n  return { notifications, addNotification, removeNotification };\n};",
      "useLocalStorage.ts": "import { useState } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};",
      "useDebounce.ts": "import { useState, useEffect } from 'react';\n\nexport const useDebounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};"
    },
    "services": {
      "apiService.ts": "import axios from 'axios';\n\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nexport const apiService = {\n  get: (url) => apiClient.get(url),\n  post: (url, data) => apiClient.post(url, data),\n  put: (url, data) => apiClient.put(url, data),\n  delete: (url) => apiClient.delete(url)\n};",
      "authService.ts": "import { apiService } from './apiService';\n\nexport const authService = {\n  login: async (email, password) => {\n    const response = await apiService.post('/auth/login', { email, password });\n    return response.data;\n  },\n  register: async (email, password, name) => {\n    const response = await apiService.post('/auth/register', { email, password, name });\n    return response.data;\n  },\n  logout: () => {\n    // Implement logout logic\n  }\n};",
      "notificationService.ts": "export const notificationService = {\n  notify: (message, type) => {\n    // Implement notification logic\n  }\n};",
      "storageService.ts": "export const storageService = {\n  save: (key, value) => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  },\n  load: (key) => {\n    const item = window.localStorage.getItem(key);\n    return item ? JSON.parse(item) : null;\n  },\n  remove: (key) => {\n    window.localStorage.removeItem(key);\n  }\n};"
    },
    "utils": {
      "constants.ts": "export const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';",
      "helpers.ts": "export const formatDate = (date) => {\n  return new Date(date).toLocaleDateString();\n};",
      "validators.ts": "export const validateEmail = (email) => {\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return re.test(email);\n};",
      "formatters.ts": "export const capitalize = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};",
      "dateUtils.ts": "export const getCurrentDate = () => {\n  return new Date().toISOString();\n};"
    }
  },
  "backend": {
    "controllers": {
      "authController.ts": "import { Request, Response } from 'express';\nimport { AuthService } from '../services/authService';\n\nexport class AuthController {\n  static async register(req: Request, res: Response): Promise<void> {\n    try {\n      const { email, password, name } = req.body;\n      const user = await AuthService.register(email, password, name);\n      res.status(201).json({ success: true, data: user });\n    } catch (error) {\n      res.status(400).json({ success: false, error: error.message });\n    }\n  }\n\n  static async login(req: Request, res: Response): Promise<void> {\n    try {\n      const { email, password } = req.body;\n      const token = await AuthService.login(email, password);\n      res.status(200).json({ success: true, data: { token } });\n    } catch (error) {\n      res.status(401).json({ success: false, error: error.message });\n    }\n  }\n}",
      "taskController.ts": "import { Request, Response } from 'express';\nimport { TaskService } from '../services/taskService';\n\nexport class TaskController {\n  static async createTask(req: Request, res: Response): Promise<void> {\n    try {\n      const { title, description, userId } = req.body;\n      const task = await TaskService.createTask(title, description, userId);\n      res.status(201).json({ success: true, data: task });\n    } catch (error) {\n      res.status(400).json({ success: false, error: error.message });\n    }\n  }\n\n  static async getTasks(req: Request, res: Response): Promise<void> {\n    try {\n      const tasks = await TaskService.getTasks();\n      res.status(200).json({ success: true, data: tasks });\n    } catch (error) {\n      res.status(400).json({ success: false, error: error.message });\n    }\n  }\n}"
    },
    "models": {
      "User.ts": "export interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: string;\n  createdAt: Date;\n  updatedAt: Date;\n}",
      "Task.ts": "export interface Task {\n  id: string;\n  title: string;\n  description: string;\n  status: string;\n  userId: string;\n  createdAt: Date;\n  updatedAt: Date;\n}",
      "FileAttachment.ts": "export interface FileAttachment {\n  id: string;\n  taskId: string;\n  url: string;\n  uploadedAt: Date;\n}",
      "CollaborationLog.ts": "export interface CollaborationLog {\n  id: string;\n  taskId: string;\n  userId: string;\n  action: string;\n  timestamp: Date;\n}",
      "ProgressMetric.ts": "export interface ProgressMetric {\n  id: string;\n  taskId: string;\n  metric: string;\n  recordedAt: Date;\n}"
    },
    "services": {
      "authService.ts": "import { User } from '../models/User';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\n\nexport class AuthService {\n  static async register(email: string, password: string, name: string): Promise<User> {\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const user: User = { id: 'user-id', email, name, role: 'user', createdAt: new Date(), updatedAt: new Date() };\n    // Save user to database\n    return user;\n  }\n\n  static async login(email: string, password: string): Promise<string> {\n    // Fetch user from database\n    const user: User = { id: 'user-id', email, name: 'Test User', role: 'user', createdAt: new Date(), updatedAt: new Date() };\n    const isPasswordValid = await bcrypt.compare(password, 'hashed-password');\n    if (!isPasswordValid) throw new Error('Invalid credentials');\n    const token = jwt.sign({ userId: user.id }, 'secret-key', { expiresIn: '1h' });\n    return token;\n  }\n}",
      "taskService.ts": "import { Task } from '../models/Task';\n\nexport class TaskService {\n  static async createTask(title: string, description: string, userId: string): Promise<Task> {\n    const task: Task = { id: 'task-id', title, description, status: 'pending', userId, createdAt: new Date(), updatedAt: new Date() };\n    // Save task to database\n    return task;\n  }\n\n  static async getTasks(): Promise<Task[]> {\n    // Fetch tasks from database\n    return [];\n  }\n}"
    },
    "routes": {
      "authRoutes.ts": "import { Router } from 'express';\nimport { AuthController } from '../controllers/authController';\n\nconst router = Router();\n\nrouter.post('/register', AuthController.register);\nrouter.post('/login', AuthController.login);\n\nexport default router;",
      "taskRoutes.ts": "import { Router } from 'express';\nimport { TaskController } from '../controllers/taskController';\n\nconst router = Router();\n\nrouter.post('/', TaskController.createTask);\nrouter.get('/', TaskController.getTasks);\n\nexport default router;"
    },
    "middleware": {
      "authMiddleware.ts": "import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\n\nexport const authMiddleware = (req: Request, res: Response, next: NextFunction) => {\n  const token = req.headers.authorization?.split(' ')[1];\n  if (!token) return res.status(401).json({ success: false, error: 'Unauthorized' });\n\n  try {\n    const decoded = jwt.verify(token, 'secret-key');\n    req.user = decoded;\n    next();\n  } catch (error) {\n    res.status(401).json({ success: false, error: 'Unauthorized' });\n  }\n};",
      "errorMiddleware.ts": "import { Request, Response, NextFunction } from 'express';\n\nexport const errorMiddleware = (err, req: Request, res: Response, next: NextFunction) => {\n  console.error(err);\n  res.status(500).json({ success: false, error: 'Internal Server Error' });\n};"
    },
    "utils": {
      "database.ts": "import AWS from 'aws-sdk';\n\nAWS.config.update({ region: 'us-east-1' });\n\nexport const dynamoDb = new AWS.DynamoDB.DocumentClient();",
      "encryption.ts": "import bcrypt from 'bcryptjs';\n\nexport const hashPassword = async (password: string): Promise<string> => {\n  return await bcrypt.hash(password, 10);\n};\n\nexport const comparePassword = async (password: string, hash: string): Promise<boolean> => {\n  return await bcrypt.compare(password, hash);\n};",
      "logger.ts": "export const logger = (message: string) => {\n  console.log(`[LOG] ${message}`);\n};",
      "validators.ts": "export const validateEmail = (email: string): boolean => {\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return re.test(email);\n};"
    }
  }
}