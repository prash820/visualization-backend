{
  "frontend": {
    "components": {
      "Header.tsx": "import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Header: React.FC = () => {\n  return (\n    <header className=\"bg-white shadow\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-16\">\n          <div className=\"flex\">\n            <Link to=\"/\" className=\"flex-shrink-0 flex items-center\">\n              <img className=\"h-8 w-auto\" src=\"/logo.svg\" alt=\"Logo\" />\n            </Link>\n            <nav className=\"hidden md:ml-6 md:flex md:space-x-8\">\n              <Link to=\"/products\" className=\"text-gray-900 hover:text-gray-700\">Products</Link>\n              <Link to=\"/cart\" className=\"text-gray-900 hover:text-gray-700\">Cart</Link>\n              <Link to=\"/orders\" className=\"text-gray-900 hover:text-gray-700\">Orders</Link>\n            </nav>\n          </div>\n          <div className=\"flex items-center\">\n            <Link to=\"/login\" className=\"text-gray-900 hover:text-gray-700\">Login</Link>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;",
      "Footer.tsx": "import React from 'react';\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className=\"bg-gray-800\">\n      <div className=\"max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8\">\n        <p className=\"text-center text-white\">Â© 2023 E-Commerce Hub. All rights reserved.</p>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;",
      "ProductList.tsx": "import React from 'react';\nimport { Product } from '../types';\n\ninterface ProductListProps {\n  products: Product[];\n}\n\nconst ProductList: React.FC<ProductListProps> = ({ products }) => {\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n      {products.map(product => (\n        <div key={product.id} className=\"bg-white shadow rounded-lg overflow-hidden\">\n          <img src={product.image} alt={product.name} className=\"w-full h-48 object-cover\" />\n          <div className=\"p-4\">\n            <h3 className=\"text-lg font-semibold\">{product.name}</h3>\n            <p className=\"text-gray-500\">${product.price.toFixed(2)}</p>\n            <button className=\"mt-2 bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700\">Add to Cart</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ProductList;",
      "CartItem.tsx": "import React from 'react';\nimport { CartItem as CartItemType } from '../types';\n\ninterface CartItemProps {\n  item: CartItemType;\n  onRemove: (id: string) => void;\n}\n\nconst CartItem: React.FC<CartItemProps> = ({ item, onRemove }) => {\n  return (\n    <div className=\"flex items-center justify-between p-4 bg-white shadow rounded-lg\">\n      <div className=\"flex items-center\">\n        <img src={item.product.image} alt={item.product.name} className=\"w-16 h-16 object-cover\" />\n        <div className=\"ml-4\">\n          <h3 className=\"text-lg font-semibold\">{item.product.name}</h3>\n          <p className=\"text-gray-500\">Quantity: {item.quantity}</p>\n        </div>\n      </div>\n      <div>\n        <p className=\"text-gray-900 font-semibold\">${(item.product.price * item.quantity).toFixed(2)}</p>\n        <button onClick={() => onRemove(item.id)} className=\"text-red-600 hover:text-red-800\">Remove</button>\n      </div>\n    </div>\n  );\n};\n\nexport default CartItem;",
      "CheckoutForm.tsx": "import React, { useState } from 'react';\n\nconst CheckoutForm: React.FC = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [address, setAddress] = useState('');\n  const [cardNumber, setCardNumber] = useState('');\n  const [expiryDate, setExpiryDate] = useState('');\n  const [cvc, setCvc] = useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Handle form submission\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <div>\n        <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">Name</label>\n        <input type=\"text\" id=\"name\" value={name} onChange={(e) => setName(e.target.value)} className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\" required />\n      </div>\n      <div>\n        <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">Email</label>\n        <input type=\"email\" id=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\" required />\n      </div>\n      <div>\n        <label htmlFor=\"address\" className=\"block text-sm font-medium text-gray-700\">Address</label>\n        <input type=\"text\" id=\"address\" value={address} onChange={(e) => setAddress(e.target.value)} className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\" required />\n      </div>\n      <div>\n        <label htmlFor=\"cardNumber\" className=\"block text-sm font-medium text-gray-700\">Card Number</label>\n        <input type=\"text\" id=\"cardNumber\" value={cardNumber} onChange={(e) => setCardNumber(e.target.value)} className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\" required />\n      </div>\n      <div className=\"flex space-x-4\">\n        <div className=\"flex-1\">\n          <label htmlFor=\"expiryDate\" className=\"block text-sm font-medium text-gray-700\">Expiry Date</label>\n          <input type=\"text\" id=\"expiryDate\" value={expiryDate} onChange={(e) => setExpiryDate(e.target.value)} className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\" required />\n        </div>\n        <div className=\"flex-1\">\n          <label htmlFor=\"cvc\" className=\"block text-sm font-medium text-gray-700\">CVC</label>\n          <input type=\"text\" id=\"cvc\" value={cvc} onChange={(e) => setCvc(e.target.value)} className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\" required />\n        </div>\n      </div>\n      <button type=\"submit\" className=\"w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700\">Submit Payment</button>\n    </form>\n  );\n};\n\nexport default CheckoutForm;",
      "OrderSummary.tsx": "import React from 'react';\nimport { Order } from '../types';\n\ninterface OrderSummaryProps {\n  order: Order;\n}\n\nconst OrderSummary: React.FC<OrderSummaryProps> = ({ order }) => {\n  return (\n    <div className=\"bg-white shadow rounded-lg p-4\">\n      <h2 className=\"text-lg font-semibold\">Order Summary</h2>\n      <ul className=\"divide-y divide-gray-200\">\n        {order.items.map(item => (\n          <li key={item.id} className=\"py-2 flex justify-between\">\n            <span>{item.product.name} x {item.quantity}</span>\n            <span>${(item.product.price * item.quantity).toFixed(2)}</span>\n          </li>\n        ))}\n      </ul>\n      <div className=\"mt-4 flex justify-between font-semibold\">\n        <span>Total</span>\n        <span>${order.totalAmount.toFixed(2)}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default OrderSummary;",
      "SearchBar.tsx": "import React, { useState } from 'react';\n\ninterface SearchBarProps {\n  onSearch: (query: string) => void;\n}\n\nconst SearchBar: React.FC<SearchBarProps> = ({ onSearch }) => {\n  const [query, setQuery] = useState('');\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSearch(query);\n  };\n\n  return (\n    <form onSubmit={handleSearch} className=\"flex\">\n      <input type=\"text\" value={query} onChange={(e) => setQuery(e.target.value)} className=\"flex-1 border border-gray-300 rounded-l-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500\" placeholder=\"Search products...\" />\n      <button type=\"submit\" className=\"bg-indigo-600 text-white px-4 py-2 rounded-r-md hover:bg-indigo-700\">Search</button>\n    </form>\n  );\n};\n\nexport default SearchBar;",
      "Notification.tsx": "import React from 'react';\n\ninterface NotificationProps {\n  message: string;\n  type: 'success' | 'error';\n}\n\nconst Notification: React.FC<NotificationProps> = ({ message, type }) => {\n  return (\n    <div className={`p-4 rounded-md ${type === 'success' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\n      {message}\n    </div>\n  );\n};\n\nexport default Notification;",
      "LoadingSpinner.tsx": "import React from 'react';\n\nconst LoadingSpinner: React.FC = () => {\n  return (\n    <div className=\"flex justify-center items-center\">\n      <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-indigo-600\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;",
      "Modal.tsx": "import React from 'react';\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n}\n\nconst Modal: React.FC<ModalProps> = ({ isOpen, onClose, children }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center\">\n      <div className=\"bg-white rounded-lg overflow-hidden shadow-xl\">\n        <div className=\"p-4\">\n          {children}\n        </div>\n        <button onClick={onClose} className=\"absolute top-0 right-0 m-2 text-gray-500 hover:text-gray-700\">&times;</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;"
    },
    "pages": {
      "HomePage.tsx": "import React, { useState, useEffect } from 'react';\nimport ProductList from '../components/ProductList';\nimport SearchBar from '../components/SearchBar';\nimport { fetchProducts } from '../services/apiService';\nimport { Product } from '../types';\n\nconst HomePage: React.FC = () => {\n  const [products, setProducts] = useState<Product[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string>('');\n\n  useEffect(() => {\n    const loadProducts = async () => {\n      try {\n        const data = await fetchProducts();\n        setProducts(data);\n      } catch (err) {\n        setError('Failed to load products');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadProducts();\n  }, []);\n\n  const handleSearch = async (query: string) => {\n    setLoading(true);\n    try {\n      const data = await fetchProducts(query);\n      setProducts(data);\n    } catch (err) {\n      setError('Failed to search products');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n      <SearchBar onSearch={handleSearch} />\n      {loading ? <LoadingSpinner /> : error ? <Notification message={error} type=\"error\" /> : <ProductList products={products} />}\n    </div>\n  );\n};\n\nexport default HomePage;",
      "ProductPage.tsx": "import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchProductById } from '../services/apiService';\nimport { Product } from '../types';\n\nconst ProductPage: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const [product, setProduct] = useState<Product | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string>('');\n\n  useEffect(() => {\n    const loadProduct = async () => {\n      try {\n        const data = await fetchProductById(id);\n        setProduct(data);\n      } catch (err) {\n        setError('Failed to load product');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadProduct();\n  }, [id]);\n\n  if (loading) return <LoadingSpinner />;\n  if (error) return <Notification message={error} type=\"error\" />;\n  if (!product) return <Notification message=\"Product not found\" type=\"error\" />;\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n      <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n        <img src={product.image} alt={product.name} className=\"w-full h-64 object-cover\" />\n        <div className=\"p-4\">\n          <h1 className=\"text-2xl font-semibold\">{product.name}</h1>\n          <p className=\"mt-2 text-gray-500\">{product.description}</p>\n          <p className=\"mt-4 text-lg font-semibold\">${product.price.toFixed(2)}</p>\n          <button className=\"mt-6 bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700\">Add to Cart</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductPage;",
      "CartPage.tsx": "import React, { useState, useEffect } from 'react';\nimport CartItem from '../components/CartItem';\nimport { fetchCartItems, removeCartItem } from '../services/apiService';\nimport { CartItem as CartItemType } from '../types';\n\nconst CartPage: React.FC = () => {\n  const [cartItems, setCartItems] = useState<CartItemType[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string>('');\n\n  useEffect(() => {\n    const loadCartItems = async () => {\n      try {\n        const data = await fetchCartItems();\n        setCartItems(data);\n      } catch (err) {\n        setError('Failed to load cart items');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadCartItems();\n  }, []);\n\n  const handleRemove = async (id: string) => {\n    try {\n      await removeCartItem(id);\n      setCartItems(cartItems.filter(item => item.id !== id));\n    } catch (err) {\n      setError('Failed to remove item');\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n      {loading ? <LoadingSpinner /> : error ? <Notification message={error} type=\"error\" /> : cartItems.length === 0 ? <Notification message=\"Your cart is empty\" type=\"success\" /> : (\n        <div className=\"space-y-4\">\n          {cartItems.map(item => (\n            <CartItem key={item.id} item={item} onRemove={handleRemove} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CartPage;",
      "CheckoutPage.tsx": "import React from 'react';\nimport CheckoutForm from '../components/CheckoutForm';\n\nconst CheckoutPage: React.FC = () => {\n  return (\n    <div className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8\">\n      <h1 className=\"text-2xl font-semibold mb-6\">Checkout</h1>\n      <CheckoutForm />\n    </div>\n  );\n};\n\nexport default CheckoutPage;",
      "OrderConfirmationPage.tsx": "import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport OrderSummary from '../components/OrderSummary';\nimport { useOrder } from '../hooks/useOrder';\n\nconst OrderConfirmationPage: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const { order, loading, error } = useOrder(id);\n\n  if (loading) return <LoadingSpinner />;\n  if (error) return <Notification message={error} type=\"error\" />;\n  if (!order) return <Notification message=\"Order not found\" type=\"error\" />;\n\n  return (\n    <div className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8\">\n      <h1 className=\"text-2xl font-semibold mb-6\">Order Confirmation</h1>\n      <OrderSummary order={order} />\n    </div>\n  );\n};\n\nexport default OrderConfirmationPage;",
      "LoginPage.tsx": "import React, { useState } from 'react';\nimport { useAuth } from '../hooks/useAuth';\nimport { useHistory } from 'react-router-dom';\n\nconst LoginPage: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const { login } = useAuth();\n  const history = useHistory();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      await login(email, password);\n      history.push('/');\n    } catch (err) {\n      setError('Invalid credentials');\n    }\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto px-4 sm:px-6 lg:px-8\">\n      <h1 className=\"text-2xl font-semibold mb-6\">Login</h1>\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <div>\n          <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">Email</label>\n          <input type=\"email\" id=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\" required />\n        </div>\n        <div>\n          <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">Password</label>\n          <input type=\"password\" id=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\" required />\n        </div>\n        {error && <Notification message={error} type=\"error\" />}\n        <button type=\"submit\" className=\"w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700\">Login</button>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginPage;",
      "RegisterPage.tsx": "import React, { useState } from 'react';\nimport { useAuth } from '../hooks/useAuth';\nimport { useHistory } from 'react-router-dom';\n\nconst RegisterPage: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [name, setName] = useState('');\n  const [error, setError] = useState('');\n  const { register } = useAuth();\n  const history = useHistory();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      await register(email, password, name);\n      history.push('/login');\n    } catch (err) {\n      setError('Registration failed');\n    }\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto px-4 sm:px-6 lg:px-8\">\n      <h1 className=\"text-2xl font-semibold mb-6\">Register</h1>\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <div>\n          <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">Name</label>\n          <input type=\"text\" id=\"name\" value={name} onChange={(e) => setName(e.target.value)} className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\" required />\n        </div>\n        <div>\n          <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">Email</label>\n          <input type=\"email\" id=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\" required />\n        </div>\n        <div>\n          <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">Password</label>\n          <input type=\"password\" id=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\" required />\n        </div>\n        {error && <Notification message={error} type=\"error\" />}\n        <button type=\"submit\" className=\"w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700\">Register</button>\n      </form>\n    </div>\n  );\n};\n\nexport default RegisterPage;"
    },
    "hooks": {
      "useAuth.ts": "import { useState, useEffect, useContext, createContext } from 'react';\nimport { login as apiLogin, register as apiRegister } from '../services/authService';\n\ninterface AuthContextType {\n  user: any;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string, name: string) => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC = ({ children }) => {\n  const [user, setUser] = useState<any>(null);\n\n  const login = async (email: string, password: string) => {\n    const userData = await apiLogin(email, password);\n    setUser(userData);\n  };\n\n  const register = async (email: string, password: string, name: string) => {\n    await apiRegister(email, password, name);\n  };\n\n  const logout = () => {\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, register, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};",
      "useOrder.ts": "import { useState, useEffect } from 'react';\nimport { fetchOrderById } from '../services/apiService';\nimport { Order } from '../types';\n\nexport const useOrder = (id: string) => {\n  const [order, setOrder] = useState<Order | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string>('');\n\n  useEffect(() => {\n    const loadOrder = async () => {\n      try {\n        const data = await fetchOrderById(id);\n        setOrder(data);\n      } catch (err) {\n        setError('Failed to load order');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadOrder();\n  }, [id]);\n\n  return { order, loading, error };\n};"
    },
    "services": {
      "apiService.ts": "import axios from 'axios';\nimport { Product, CartItem, Order } from '../types';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:4000';\n\nexport const fetchProducts = async (query: string = ''): Promise<Product[]> => {\n  const response = await axios.get(`${API_URL}/products`, { params: { q: query } });\n  return response.data;\n};\n\nexport const fetchProductById = async (id: string): Promise<Product> => {\n  const response = await axios.get(`${API_URL}/products/${id}`);\n  return response.data;\n};\n\nexport const fetchCartItems = async (): Promise<CartItem[]> => {\n  const response = await axios.get(`${API_URL}/cart`);\n  return response.data;\n};\n\nexport const removeCartItem = async (id: string): Promise<void> => {\n  await axios.delete(`${API_URL}/cart/${id}`);\n};\n\nexport const fetchOrderById = async (id: string): Promise<Order> => {\n  const response = await axios.get(`${API_URL}/orders/${id}`);\n  return response.data;\n};"
    },
    "utils": {
      "constants.ts": "export const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:4000';",
      "helpers.ts": "export const formatCurrency = (amount: number): string => {\n  return `$${amount.toFixed(2)}`;\n};"
    }
  },
  "backend": {
    "controllers": {
      "authController.ts": "import { Request, Response } from 'express';\nimport { loginUser, registerUser } from '../services/authService';\n\nexport const login = async (req: Request, res: Response) => {\n  try {\n    const { email, password } = req.body;\n    const token = await loginUser(email, password);\n    res.status(200).json({ token });\n  } catch (error) {\n    res.status(401).json({ message: error.message });\n  }\n};\n\nexport const register = async (req: Request, res: Response) => {\n  try {\n    const { email, password, name } = req.body;\n    await registerUser(email, password, name);\n    res.status(201).json({ message: 'User registered successfully' });\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};"
    },
    "models": {
      "User.ts": "import { Schema, model } from 'mongoose';\n\nconst userSchema = new Schema({\n  email: { type: String, required: true, unique: true },\n  passwordHash: { type: String, required: true },\n  name: { type: String, required: true },\n  role: { type: String, default: 'customer' },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now }\n});\n\nexport const User = model('User', userSchema);"
    },
    "services": {
      "authService.ts": "import bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { User } from '../models/User';\n\nexport const loginUser = async (email: string, password: string): Promise<string> => {\n  const user = await User.findOne({ email });\n  if (!user || !bcrypt.compareSync(password, user.passwordHash)) {\n    throw new Error('Invalid credentials');\n  }\n  return jwt.sign({ id: user.id, email: user.email }, process.env.JWT_SECRET!, { expiresIn: '1h' });\n};\n\nexport const registerUser = async (email: string, password: string, name: string): Promise<void> => {\n  const passwordHash = bcrypt.hashSync(password, 10);\n  const user = new User({ email, passwordHash, name });\n  await user.save();\n};"
    },
    "routes": {
      "authRoutes.ts": "import { Router } from 'express';\nimport { login, register } from '../controllers/authController';\n\nconst router = Router();\n\nrouter.post('/login', login);\nrouter.post('/register', register);\n\nexport default router;"
    },
    "middleware": {
      "authMiddleware.ts": "import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\n\nexport const authenticate = (req: Request, res: Response, next: NextFunction) => {\n  const token = req.header('Authorization')?.replace('Bearer ', '');\n  if (!token) return res.status(401).json({ message: 'Access denied' });\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!);\n    req.user = decoded;\n    next();\n  } catch (err) {\n    res.status(400).json({ message: 'Invalid token' });\n  }\n};"
    },
    "utils": {
      "logger.ts": "import winston from 'winston';\n\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.json(),\n  transports: [\n    new winston.transports.Console({\n      format: winston.format.simple()\n    })\n  ]\n});\n\nexport default logger;"
    }
  }
}