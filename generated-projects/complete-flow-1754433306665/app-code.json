{
  "frontend": {
    "components": {
      "Header.tsx": "import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Header: React.FC = () => {\n  return (\n    <header className=\"bg-blue-600 text-white p-4\">\n      <div className=\"container mx-auto flex justify-between items-center\">\n        <h1 className=\"text-xl font-bold\">CodeGen Automator</h1>\n        <nav>\n          <Link to=\"/\" className=\"mr-4\">Home</Link>\n          <Link to=\"/dashboard\" className=\"mr-4\">Dashboard</Link>\n          <Link to=\"/profile\">Profile</Link>\n        </nav>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;",
      "Sidebar.tsx": "import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Sidebar: React.FC = () => {\n  return (\n    <aside className=\"w-64 bg-gray-800 text-white h-full\">\n      <nav className=\"mt-10\">\n        <Link to=\"/upload\" className=\"block py-2.5 px-4 rounded transition duration-200 hover:bg-gray-700\">Upload UML</Link>\n        <Link to=\"/generate\" className=\"block py-2.5 px-4 rounded transition duration-200 hover:bg-gray-700\">Generate Code</Link>\n        <Link to=\"/deploy\" className=\"block py-2.5 px-4 rounded transition duration-200 hover:bg-gray-700\">Deploy</Link>\n      </nav>\n    </aside>\n  );\n};\n\nexport default Sidebar;",
      "MainView.tsx": "import React from 'react';\n\nconst MainView: React.FC = ({ children }) => {\n  return (\n    <main className=\"flex-1 p-6 bg-gray-100\">\n      {children}\n    </main>\n  );\n};\n\nexport default MainView;",
      "CodeEditor.tsx": "import React, { useState } from 'react';\n\ninterface CodeEditorProps {\n  initialCode: string;\n  onChange: (code: string) => void;\n}\n\nconst CodeEditor: React.FC<CodeEditorProps> = ({ initialCode, onChange }) => {\n  const [code, setCode] = useState(initialCode);\n\n  const handleCodeChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setCode(event.target.value);\n    onChange(event.target.value);\n  };\n\n  return (\n    <textarea\n      value={code}\n      onChange={handleCodeChange}\n      className=\"w-full h-64 p-4 border rounded\"\n    />\n  );\n};\n\nexport default CodeEditor;",
      "UMLUploader.tsx": "import React, { useState } from 'react';\n\nconst UMLUploader: React.FC = () => {\n  const [file, setFile] = useState<File | null>(null);\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files) {\n      setFile(event.target.files[0]);\n    }\n  };\n\n  const handleUpload = () => {\n    if (file) {\n      // Handle file upload\n    }\n  };\n\n  return (\n    <div className=\"p-4\">\n      <input type=\"file\" onChange={handleFileChange} />\n      <button onClick={handleUpload} className=\"ml-2 bg-blue-500 text-white py-1 px-3 rounded\">Upload</button>\n    </div>\n  );\n};\n\nexport default UMLUploader;",
      "CodeViewer.tsx": "import React from 'react';\n\ninterface CodeViewerProps {\n  code: string;\n}\n\nconst CodeViewer: React.FC<CodeViewerProps> = ({ code }) => {\n  return (\n    <pre className=\"bg-gray-900 text-white p-4 rounded\">\n      <code>{code}</code>\n    </pre>\n  );\n};\n\nexport default CodeViewer;",
      "DeploymentManager.tsx": "import React from 'react';\n\nconst DeploymentManager: React.FC = () => {\n  const handleDeploy = () => {\n    // Trigger deployment process\n  };\n\n  return (\n    <div className=\"p-4\">\n      <button onClick={handleDeploy} className=\"bg-green-500 text-white py-2 px-4 rounded\">Deploy Code</button>\n    </div>\n  );\n};\n\nexport default DeploymentManager;",
      "Notification.tsx": "import React from 'react';\n\ninterface NotificationProps {\n  message: string;\n  type: 'success' | 'error' | 'info';\n}\n\nconst Notification: React.FC<NotificationProps> = ({ message, type }) => {\n  const getColor = () => {\n    switch (type) {\n      case 'success':\n        return 'bg-green-500';\n      case 'error':\n        return 'bg-red-500';\n      case 'info':\n        return 'bg-blue-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <div className={`${getColor()} text-white p-4 rounded mb-4`}>\n      {message}\n    </div>\n  );\n};\n\nexport default Notification;",
      "LoadingSpinner.tsx": "import React from 'react';\n\nconst LoadingSpinner: React.FC = () => {\n  return (\n    <div className=\"flex justify-center items-center\">\n      <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;",
      "ErrorBoundary.tsx": "import React, { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(_: Error): State {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('ErrorBoundary caught an error', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;",
      "SearchBar.tsx": "import React, { useState } from 'react';\n\ninterface SearchBarProps {\n  onSearch: (query: string) => void;\n}\n\nconst SearchBar: React.FC<SearchBarProps> = ({ onSearch }) => {\n  const [query, setQuery] = useState('');\n\n  const handleSearch = () => {\n    onSearch(query);\n  };\n\n  return (\n    <div className=\"flex items-center\">\n      <input\n        type=\"text\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        className=\"border p-2 rounded\"\n        placeholder=\"Search...\"\n      />\n      <button onClick={handleSearch} className=\"ml-2 bg-blue-500 text-white py-1 px-3 rounded\">Search</button>\n    </div>\n  );\n};\n\nexport default SearchBar;",
      "FilterPanel.tsx": "import React from 'react';\n\ninterface FilterPanelProps {\n  filters: string[];\n  onFilterChange: (filter: string) => void;\n}\n\nconst FilterPanel: React.FC<FilterPanelProps> = ({ filters, onFilterChange }) => {\n  return (\n    <div className=\"p-4 bg-white rounded shadow\">\n      <h2 className=\"text-lg font-bold mb-2\">Filters</h2>\n      <ul>\n        {filters.map((filter) => (\n          <li key={filter} className=\"mb-1\">\n            <button onClick={() => onFilterChange(filter)} className=\"text-blue-500 hover:underline\">\n              {filter}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default FilterPanel;",
      "Pagination.tsx": "import React from 'react';\n\ninterface PaginationProps {\n  currentPage: number;\n  totalPages: number;\n  onPageChange: (page: number) => void;\n}\n\nconst Pagination: React.FC<PaginationProps> = ({ currentPage, totalPages, onPageChange }) => {\n  const handlePrevious = () => {\n    if (currentPage > 1) {\n      onPageChange(currentPage - 1);\n    }\n  };\n\n  const handleNext = () => {\n    if (currentPage < totalPages) {\n      onPageChange(currentPage + 1);\n    }\n  };\n\n  return (\n    <div className=\"flex justify-between items-center mt-4\">\n      <button onClick={handlePrevious} disabled={currentPage === 1} className=\"bg-gray-300 text-gray-700 py-1 px-3 rounded\">\n        Previous\n      </button>\n      <span>Page {currentPage} of {totalPages}</span>\n      <button onClick={handleNext} disabled={currentPage === totalPages} className=\"bg-gray-300 text-gray-700 py-1 px-3 rounded\">\n        Next\n      </button>\n    </div>\n  );\n};\n\nexport default Pagination;",
      "Modal.tsx": "import React from 'react';\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n  children: React.ReactNode;\n}\n\nconst Modal: React.FC<ModalProps> = ({ isOpen, onClose, title, children }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center\">\n      <div className=\"bg-white p-6 rounded shadow-lg w-1/3\">\n        <div className=\"flex justify-between items-center\">\n          <h2 className=\"text-xl font-bold\">{title}</h2>\n          <button onClick={onClose} className=\"text-red-500\">&times;</button>\n        </div>\n        <div className=\"mt-4\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;",
      "MobileNav.tsx": "import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst MobileNav: React.FC = () => {\n  return (\n    <nav className=\"bg-blue-600 text-white p-4 md:hidden\">\n      <div className=\"container mx-auto flex justify-between items-center\">\n        <h1 className=\"text-xl font-bold\">CodeGen Automator</h1>\n        <div>\n          <Link to=\"/\" className=\"mr-4\">Home</Link>\n          <Link to=\"/dashboard\" className=\"mr-4\">Dashboard</Link>\n          <Link to=\"/profile\">Profile</Link>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default MobileNav;"
    },
    "pages": {
      "HomePage.tsx": "import React from 'react';\nimport Header from '../components/Header';\nimport MainView from '../components/MainView';\n\nconst HomePage: React.FC = () => {\n  return (\n    <div>\n      <Header />\n      <MainView>\n        <h1 className=\"text-2xl font-bold\">Welcome to CodeGen Automator</h1>\n        <p className=\"mt-4\">Automate your code generation process with ease.</p>\n      </MainView>\n    </div>\n  );\n};\n\nexport default HomePage;",
      "DashboardPage.tsx": "import React from 'react';\nimport Header from '../components/Header';\nimport Sidebar from '../components/Sidebar';\nimport MainView from '../components/MainView';\nimport UMLUploader from '../components/UMLUploader';\nimport CodeViewer from '../components/CodeViewer';\nimport DeploymentManager from '../components/DeploymentManager';\n\nconst DashboardPage: React.FC = () => {\n  return (\n    <div className=\"flex\">\n      <Sidebar />\n      <MainView>\n        <Header />\n        <UMLUploader />\n        <CodeViewer code=\"// Generated code will appear here\" />\n        <DeploymentManager />\n      </MainView>\n    </div>\n  );\n};\n\nexport default DashboardPage;",
      "ProfilePage.tsx": "import React from 'react';\nimport Header from '../components/Header';\nimport MainView from '../components/MainView';\n\nconst ProfilePage: React.FC = () => {\n  return (\n    <div>\n      <Header />\n      <MainView>\n        <h1 className=\"text-2xl font-bold\">User Profile</h1>\n        <p className=\"mt-4\">Manage your profile settings here.</p>\n      </MainView>\n    </div>\n  );\n};\n\nexport default ProfilePage;",
      "LoginPage.tsx": "import React from 'react';\nimport Header from '../components/Header';\nimport MainView from '../components/MainView';\n\nconst LoginPage: React.FC = () => {\n  return (\n    <div>\n      <Header />\n      <MainView>\n        <h1 className=\"text-2xl font-bold\">Login</h1>\n        <p className=\"mt-4\">Please login to access the application.</p>\n        {/* Add login form here */}\n      </MainView>\n    </div>\n  );\n};\n\nexport default LoginPage;",
      "NotFoundPage.tsx": "import React from 'react';\nimport Header from '../components/Header';\nimport MainView from '../components/MainView';\n\nconst NotFoundPage: React.FC = () => {\n  return (\n    <div>\n      <Header />\n      <MainView>\n        <h1 className=\"text-2xl font-bold\">404 - Page Not Found</h1>\n        <p className=\"mt-4\">The page you are looking for does not exist.</p>\n      </MainView>\n    </div>\n  );\n};\n\nexport default NotFoundPage;"
    },
    "hooks": {
      "useAuth.ts": "import { useState, useEffect } from 'react';\nimport { Auth } from 'aws-amplify';\n\nexport const useAuth = () => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const checkUser = async () => {\n      try {\n        const user = await Auth.currentAuthenticatedUser();\n        setUser(user);\n      } catch (error) {\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkUser();\n  }, []);\n\n  const login = async (username: string, password: string) => {\n    setLoading(true);\n    try {\n      const user = await Auth.signIn(username, password);\n      setUser(user);\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    setLoading(true);\n    try {\n      await Auth.signOut();\n      setUser(null);\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { user, loading, login, logout };\n};",
      "useApi.ts": "import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport const useApi = (endpoint: string, method: 'GET' | 'POST' = 'GET', body: any = null) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios({ url: endpoint, method, data: body });\n        setData(response.data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [endpoint, method, body]);\n\n  return { data, loading, error };\n};",
      "useNotification.ts": "import { useState } from 'react';\n\nexport const useNotification = () => {\n  const [notifications, setNotifications] = useState<string[]>([]);\n\n  const addNotification = (message: string) => {\n    setNotifications((prev) => [...prev, message]);\n  };\n\n  const removeNotification = (index: number) => {\n    setNotifications((prev) => prev.filter((_, i) => i !== index));\n  };\n\n  return { notifications, addNotification, removeNotification };\n};",
      "useLocalStorage.ts": "import { useState } from 'react';\n\nexport const useLocalStorage = (key: string, initialValue: any) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: any) => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};",
      "useDebounce.ts": "import { useState, useEffect } from 'react';\n\nexport const useDebounce = (value: any, delay: number) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};"
    },
    "services": {
      "apiService.ts": "import axios from 'axios';\n\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const fetchUMLDiagrams = async () => {\n  const response = await apiClient.get('/uml-diagrams');\n  return response.data;\n};\n\nexport const generateCode = async (umlDiagramId: string) => {\n  const response = await apiClient.post(`/generate-code/${umlDiagramId}`);\n  return response.data;\n};\n\nexport const deployCode = async (codeId: string) => {\n  const response = await apiClient.post(`/deploy/${codeId}`);\n  return response.data;\n};",
      "authService.ts": "import { Auth } from 'aws-amplify';\n\nexport const signIn = async (username: string, password: string) => {\n  return await Auth.signIn(username, password);\n};\n\nexport const signOut = async () => {\n  return await Auth.signOut();\n};\n\nexport const signUp = async (username: string, password: string, attributes: any) => {\n  return await Auth.signUp({ username, password, attributes });\n};",
      "notificationService.ts": "export const notifyUser = (message: string, type: 'success' | 'error' | 'info') => {\n  // Implement notification logic, e.g., using a toast library\n  console.log(`[${type.toUpperCase()}] ${message}`);\n};",
      "storageService.ts": "export const saveToLocalStorage = (key: string, value: any) => {\n  try {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    console.error('Error saving to localStorage', error);\n  }\n};\n\nexport const loadFromLocalStorage = (key: string) => {\n  try {\n    const item = window.localStorage.getItem(key);\n    return item ? JSON.parse(item) : null;\n  } catch (error) {\n    console.error('Error loading from localStorage', error);\n    return null;\n  }\n};"
    },
    "utils": {
      "constants.ts": "export const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\nexport const AUTH_CONFIG = {\n  domain: process.env.REACT_APP_AUTH_DOMAIN,\n  clientId: process.env.REACT_APP_AUTH_CLIENT_ID,\n};",
      "helpers.ts": "export const formatDate = (date: Date): string => {\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  });\n};",
      "validators.ts": "export const validateEmail = (email: string): boolean => {\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return re.test(email);\n};",
      "formatters.ts": "export const formatCurrency = (amount: number): string => {\n  return `$${amount.toFixed(2)}`;\n};",
      "dateUtils.ts": "export const getCurrentDate = (): string => {\n  const date = new Date();\n  return date.toISOString().split('T')[0];\n};"
    }
  },
  "backend": {
    "controllers": {
      "authController.ts": "import { Request, Response } from 'express';\nimport { AuthService } from '../services/authService';\n\nexport const register = async (req: Request, res: Response) => {\n  try {\n    const { email, password, name } = req.body;\n    const user = await AuthService.register(email, password, name);\n    res.status(201).json({ success: true, data: user });\n  } catch (error) {\n    res.status(500).json({ success: false, error: error.message });\n  }\n};\n\nexport const login = async (req: Request, res: Response) => {\n  try {\n    const { email, password } = req.body;\n    const token = await AuthService.login(email, password);\n    res.status(200).json({ success: true, token });\n  } catch (error) {\n    res.status(401).json({ success: false, error: error.message });\n  }\n};",
      "umlController.ts": "import { Request, Response } from 'express';\nimport { UMLService } from '../services/umlService';\n\nexport const uploadUML = async (req: Request, res: Response) => {\n  try {\n    const { userId, name, content } = req.body;\n    const umlDiagram = await UMLService.uploadUML(userId, name, content);\n    res.status(201).json({ success: true, data: umlDiagram });\n  } catch (error) {\n    res.status(500).json({ success: false, error: error.message });\n  }\n};\n\nexport const generateCode = async (req: Request, res: Response) => {\n  try {\n    const { umlDiagramId } = req.params;\n    const generatedCode = await UMLService.generateCode(umlDiagramId);\n    res.status(200).json({ success: true, data: generatedCode });\n  } catch (error) {\n    res.status(500).json({ success: false, error: error.message });\n  }\n};",
      "deploymentController.ts": "import { Request, Response } from 'express';\nimport { DeploymentService } from '../services/deploymentService';\n\nexport const deployCode = async (req: Request, res: Response) => {\n  try {\n    const { generatedCodeId } = req.params;\n    const deployment = await DeploymentService.deployCode(generatedCodeId);\n    res.status(200).json({ success: true, data: deployment });\n  } catch (error) {\n    res.status(500).json({ success: false, error: error.message });\n  }\n};"
    },
    "models": {
      "User.ts": "import { Schema, model } from 'mongoose';\n\nconst userSchema = new Schema({\n  email: { type: String, required: true, unique: true },\n  name: { type: String, required: true },\n  password: { type: String, required: true },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nexport const User = model('User', userSchema);",
      "UMLDiagram.ts": "import { Schema, model } from 'mongoose';\n\nconst umlDiagramSchema = new Schema({\n  userId: { type: String, required: true },\n  name: { type: String, required: true },\n  content: { type: String, required: true },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nexport const UMLDiagram = model('UMLDiagram', umlDiagramSchema);",
      "GeneratedCode.ts": "import { Schema, model } from 'mongoose';\n\nconst generatedCodeSchema = new Schema({\n  umlDiagramId: { type: String, required: true },\n  userId: { type: String, required: true },\n  code: { type: String, required: true },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nexport const GeneratedCode = model('GeneratedCode', generatedCodeSchema);",
      "Deployment.ts": "import { Schema, model } from 'mongoose';\n\nconst deploymentSchema = new Schema({\n  generatedCodeId: { type: String, required: true },\n  userId: { type: String, required: true },\n  status: { type: String, required: true },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nexport const Deployment = model('Deployment', deploymentSchema);"
    },
    "services": {
      "authService.ts": "import { User } from '../models/User';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\n\nexport const AuthService = {\n  register: async (email: string, password: string, name: string) => {\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const user = new User({ email, password: hashedPassword, name });\n    return await user.save();\n  },\n\n  login: async (email: string, password: string) => {\n    const user = await User.findOne({ email });\n    if (!user) throw new Error('User not found');\n\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) throw new Error('Invalid credentials');\n\n    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET!, { expiresIn: '1h' });\n    return token;\n  }\n};",
      "umlService.ts": "import { UMLDiagram } from '../models/UMLDiagram';\nimport { GeneratedCode } from '../models/GeneratedCode';\n\nexport const UMLService = {\n  uploadUML: async (userId: string, name: string, content: string) => {\n    const umlDiagram = new UMLDiagram({ userId, name, content });\n    return await umlDiagram.save();\n  },\n\n  generateCode: async (umlDiagramId: string) => {\n    const umlDiagram = await UMLDiagram.findById(umlDiagramId);\n    if (!umlDiagram) throw new Error('UML Diagram not found');\n\n    // Simulate code generation\n    const code = `// Generated code for ${umlDiagram.name}`;\n    const generatedCode = new GeneratedCode({ umlDiagramId, userId: umlDiagram.userId, code });\n    return await generatedCode.save();\n  }\n};",
      "deploymentService.ts": "import { Deployment } from '../models/Deployment';\nimport { GeneratedCode } from '../models/GeneratedCode';\n\nexport const DeploymentService = {\n  deployCode: async (generatedCodeId: string) => {\n    const generatedCode = await GeneratedCode.findById(generatedCodeId);\n    if (!generatedCode) throw new Error('Generated Code not found');\n\n    // Simulate deployment\n    const deployment = new Deployment({ generatedCodeId, userId: generatedCode.userId, status: 'Deployed' });\n    return await deployment.save();\n  }\n};"
    },
    "routes": {
      "authRoutes.ts": "import { Router } from 'express';\nimport { register, login } from '../controllers/authController';\n\nconst router = Router();\n\nrouter.post('/register', register);\nrouter.post('/login', login);\n\nexport default router;",
      "umlRoutes.ts": "import { Router } from 'express';\nimport { uploadUML, generateCode } from '../controllers/umlController';\n\nconst router = Router();\n\nrouter.post('/upload', uploadUML);\nrouter.post('/generate/:umlDiagramId', generateCode);\n\nexport default router;",
      "deploymentRoutes.ts": "import { Router } from 'express';\nimport { deployCode } from '../controllers/deploymentController';\n\nconst router = Router();\n\nrouter.post('/deploy/:generatedCodeId', deployCode);\n\nexport default router;"
    },
    "middleware": {
      "authMiddleware.ts": "import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\n\nexport const authMiddleware = (req: Request, res: Response, next: NextFunction) => {\n  const token = req.header('Authorization')?.replace('Bearer ', '');\n  if (!token) return res.status(401).json({ success: false, error: 'Access denied' });\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!);\n    req.user = decoded;\n    next();\n  } catch (error) {\n    res.status(400).json({ success: false, error: 'Invalid token' });\n  }\n};",
      "errorMiddleware.ts": "import { Request, Response, NextFunction } from 'express';\n\nexport const errorMiddleware = (err: any, req: Request, res: Response, next: NextFunction) => {\n  console.error(err.stack);\n  res.status(500).json({ success: false, error: 'Something went wrong' });\n};"
    },
    "utils": {
      "database.ts": "import mongoose from 'mongoose';\n\nexport const connectDB = async () => {\n  try {\n    await mongoose.connect(process.env.MONGO_URI!, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    console.log('MongoDB connected');\n  } catch (error) {\n    console.error('MongoDB connection error', error);\n    process.exit(1);\n  }\n};",
      "encryption.ts": "import bcrypt from 'bcryptjs';\n\nexport const hashPassword = async (password: string) => {\n  return await bcrypt.hash(password, 10);\n};\n\nexport const comparePassword = async (password: string, hash: string) => {\n  return await bcrypt.compare(password, hash);\n};",
      "logger.ts": "import winston from 'winston';\n\nexport const logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.json(),\n  transports: [\n    new winston.transports.Console({\n      format: winston.format.simple(),\n    }),\n  ],\n});",
      "validators.ts": "import { body } from 'express-validator';\n\nexport const validateRegistration = [\n  body('email').isEmail().withMessage('Enter a valid email'),\n  body('password').isLength({ min: 6 }).withMessage('Password must be at least 6 characters'),\n  body('name').not().isEmpty().withMessage('Name is required'),\n];"
    }
  }
}