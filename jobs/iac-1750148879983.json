{
  "id": "iac-1750148879983",
  "status": "completed",
  "progress": 100,
  "createdAt": "2025-06-17T08:27:59.983Z",
  "projectId": "e73dba15-ca04-4666-a6a2-a68ee4bf2f03",
  "prompt": "Create a task management app using aws",
  "umlDiagrams": {
    "class": "classDiagram\n  class Task {\n    +id: int\n    +title: string\n    +description: string\n    +dueDate: Date\n    +status: string\n    +assignUser(user: User): void\n  }\n\n  class User {\n    +id: int\n    +name: string\n    +email: string\n    +tasks: List~Task~\n    +addTask(task: Task): void\n  }\n\n  class Project {\n    +id: int\n    +name: string\n    +tasks: List~Task~\n    +addTask(task: Task): void\n  }\n\n  Task --> User : assigned to\n  Project o-- Task : contains\n  User \"1\" --> \"many\" Task : manages",
    "sequence": "sequenceDiagram\n  participant User\n  participant WebApp\n  participant APIGateway\n  participant Lambda\n  participant DynamoDB\n\n  User->>WebApp: Create Task\n  WebApp->>APIGateway: Send Task Details\n  APIGateway->>Lambda: Trigger Function\n  Lambda->>DynamoDB: Save Task\n  DynamoDB-->>Lambda: Confirmation\n  Lambda-->>APIGateway: Task Created\n  APIGateway-->>WebApp: Task Created\n  WebApp-->>User: Task Created",
    "component": "flowchart TB\n  subgraph Frontend\n    web[Web App]\n  end\n  subgraph Backend\n    apiGateway[API Gateway]\n    lambda[Lambda Function]\n  end\n  subgraph Storage\n    dynamoDB[DynamoDB]\n  end\n  subgraph Monitoring\n    cloudWatch[CloudWatch]\n  end\n\n  web --> apiGateway\n  apiGateway --> lambda\n  lambda --> dynamoDB\n  lambda --> cloudWatch",
    "architecture": "architecture-beta\n  group Frontend(logos:aws-cloudfront)[Frontend]\n    service webApp(logos:aws-amplify)[Web App] in Frontend\n  group Backend(logos:aws-lambda)[Backend]\n    service apiGateway(logos:aws-api-gateway)[API Gateway] in Backend\n    service taskLambda(logos:aws-lambda)[Task Lambda] in Backend\n  group Storage(logos:aws-dynamodb)[Storage]\n    service taskDB(logos:aws-dynamodb)[Task Database] in Storage\n  group Monitoring(logos:aws-cloudwatch)[Monitoring]\n    service logging(logos:aws-cloudwatch)[CloudWatch Logging] in Monitoring\n\n  webApp:R --> L:apiGateway\n  apiGateway:L --> R:taskLambda\n  taskLambda:L --> R:taskDB\n  taskLambda:T --> B:logging"
  },
  "result": "provider \"aws\" {\n  region = \"us-west-2\"\n}\n\nresource \"aws_dynamodb_table\" \"task_table\" {\n  name           = \"TaskTable\"\n  billing_mode   = \"PROVISIONED\"\n  read_capacity  = 5\n  write_capacity = 5\n  hash_key       = \"id\"\n\n  attribute {\n    name = \"id\"\n    type = \"N\"\n  }\n}\n\nresource \"aws_lambda_function\" \"task_lambda\" {\n  function_name = \"TaskLambda\"\n  handler       = \"handler.task\"\n  runtime       = \"nodejs12.x\"\n\n  role = aws_iam_role.lambda_exec.arn\n\n  filename = \"task_lambda.zip\"\n}\n\nresource \"aws_api_gateway_rest_api\" \"task_api\" {\n  name        = \"TaskAPI\"\n  description = \"API for managing tasks\"\n}\n\nresource \"aws_api_gateway_resource\" \"task_resource\" {\n  rest_api_id = aws_api_gateway_rest_api.task_api.id\n  parent_id   = aws_api_gateway_rest_api.task_api.root_resource_id\n  path_part   = \"task\"\n}\n\nresource \"aws_api_gateway_method\" \"task_method\" {\n  rest_api_id   = aws_api_gateway_rest_api.task_api.id\n  resource_id   = aws_api_gateway_resource.task_resource.id\n  http_method   = \"POST\"\n  authorization = \"NONE\"\n}\n\nresource \"aws_api_gateway_integration\" \"task_integration\" {\n  rest_api_id = aws_api_gateway_rest_api.task_api.id\n  resource_id = aws_api_gateway_resource.task_resource.id\n  http_method = aws_api_gateway_method.task_method.http_method\n\n  integration_http_method = \"POST\"\n  type                    = \"AWS_PROXY\"\n  uri                     = aws_lambda_function.task_lambda.invoke_arn\n}\n\nresource \"aws_lambda_permission\" \"apigw_lambda\" {\n  statement_id  = \"AllowAPIGatewayInvoke\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = aws_lambda_function.task_lambda.function_name\n  principal     = \"apigateway.amazonaws.com\"\n  source_arn    = \"${aws_api_gateway_rest_api.task_api.execution_arn}/*/${aws_api_gateway_method.task_method.http_method}${aws_api_gateway_resource.task_resource.path}\"\n}\n\nresource \"aws_cloudwatch_log_group\" \"task_lambda_log_group\" {\n  name = \"/aws/lambda/${aws_lambda_function.task_lambda.function_name}\"\n  retention_in_days = 14\n}\n\nresource \"aws_iam_role\" \"lambda_exec\" {\n  name = \"lambda_exec\"\n\n  assume_role_policy = <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\nEOF\n}\n\nresource \"aws_iam_role_policy\" \"lambda_exec\" {\n  name = \"lambda_exec\"\n  role = aws_iam_role.lambda_exec.id\n\n  policy = <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\",\n        \"dynamodb:PutItem\"\n      ],\n      \"Resource\": \"*\",\n      \"Effect\": \"Allow\"\n    }\n  ]\n}\nEOF\n}"
}