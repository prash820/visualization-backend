{
  "id": "iac-1750148151420",
  "status": "completed",
  "progress": 100,
  "createdAt": "2025-06-17T08:15:51.420Z",
  "projectId": "c114c62a-a76f-4da3-83a0-b53fd5916c71",
  "prompt": "Create an app for Zeppelin Sneaker brand to sell premium sneakers and also add features like sneaker drops to drop limited editions, use AWS for this",
  "umlDiagrams": {
    "class": "classDiagram\n  class Sneaker {\n    +id: int\n    +name: string\n    +price: double\n    +isLimitedEdition: boolean\n    +releaseDate: Date\n  }\n  \n  class Order {\n    +orderId: int\n    +sneakerId: int\n    +userId: int\n    +orderDate: Date\n    +status: string\n  }\n\n  class User {\n    +userId: int\n    +name: string\n    +email: string\n    +createOrder(sneakerId: int): Order\n  }\n\n  class SneakerDrop {\n    +dropId: int\n    +sneakerId: int\n    +dropDate: Date\n    +notifyUsers(): void\n  }\n\n  SneakerDrop --> Sneaker\n  Order --> Sneaker\n  Order --> User\n  User --> SneakerDrop",
    "sequence": "sequenceDiagram\n  participant User\n  participant MobileApp\n  participant WebApp\n  participant APIGateway\n  participant SneakerService\n  participant OrderService\n  participant NotificationService\n\n  User->>MobileApp: Browse Sneakers\n  MobileApp->>APIGateway: Request Sneaker List\n  APIGateway->>SneakerService: Fetch Sneakers\n  SneakerService-->>APIGateway: Sneakers List\n  APIGateway-->>MobileApp: Sneakers List\n  MobileApp-->>User: Display Sneakers\n\n  User->>WebApp: Orders Sneaker\n  WebApp->>APIGateway: Send Order\n  APIGateway->>OrderService: Create Order\n  OrderService-->>APIGateway: Order Confirmation\n  APIGateway-->>WebApp: Order Confirmation\n  WebApp-->>User: Display Order Confirmation\n\n  SneakerService->>NotificationService: New Sneaker Drop\n  NotificationService-->>User: Notify Sneaker Drop",
    "component": "flowchart TB\n  subgraph Frontend\n    web[Web App]\n    mobile[Mobile App]\n  end\n  subgraph Backend\n    apiGateway[API Gateway]\n    sneakerService[Sneaker Service]\n    orderService[Order Service]\n    notificationService[Notification Service]\n  end\n  subgraph Storage\n    rds[RDS Database]\n    s3[S3 Bucket]\n  end\n\n  web --> apiGateway\n  mobile --> apiGateway\n  apiGateway --> sneakerService\n  apiGateway --> orderService\n  apiGateway --> notificationService\n  sneakerService --> rds\n  orderService --> rds\n  notificationService --> s3",
    "architecture": "architecture-beta\n  group frontend(logos:aws-amplify)[Frontend]\n    service web(logos:aws-cloudfront)[Web App] in frontend\n    service mobile(logos:aws-amplify)[Mobile App] in frontend\n  group backend(logos:aws-lambda)[Backend]\n    service apiGateway(logos:aws-api-gateway)[API Gateway] in backend\n    service sneakerService(logos:aws-lambda)[Sneaker Service] in backend\n    service orderService(logos:aws-lambda)[Order Service] in backend\n    service notificationService(logos:aws-sns)[Notification Service] in backend\n  group storage(logos:aws-rds)[Storage]\n    service rds(logos:aws-rds)[RDS Database] in storage\n    service s3(logos:aws-s3)[S3 Bucket] in storage\n  group monitoring(logos:aws-cloudwatch)[Monitoring]\n    service cloudwatch(logos:aws-cloudwatch)[CloudWatch] in monitoring\n\n  web:R --> L:apiGateway\n  mobile:R --> L:apiGateway\n  apiGateway:R --> L:sneakerService\n  apiGateway:R --> L:orderService\n  apiGateway:R --> L:notificationService\n  sneakerService:B --> T:rds\n  orderService:B --> T:rds\n  notificationService:B --> T:s3\n  sneakerService:L --> R:cloudwatch\n  orderService:L --> R:cloudwatch\n  notificationService:L --> R:cloudwatch"
  },
  "result": "provider \"aws\" {\n  region = \"us-west-2\"\n}\n\nresource \"aws_db_instance\" \"rds\" {\n  allocated_storage    = 20\n  storage_type         = \"gp2\"\n  engine               = \"mysql\"\n  engine_version       = \"5.7\"\n  instance_class       = \"db.t2.micro\"\n  name                 = \"sneakerdb\"\n  username             = \"admin\"\n  password             = \"password\"\n  parameter_group_name = \"default.mysql5.7\"\n  publicly_accessible  = true\n  skip_final_snapshot  = true\n}\n\nresource \"aws_s3_bucket\" \"bucket\" {\n  bucket = \"sneaker-images\"\n  acl    = \"public-read\"\n}\n\nresource \"aws_api_gateway_rest_api\" \"api\" {\n  name        = \"sneaker-api\"\n  description = \"API for Sneaker App\"\n}\n\nresource \"aws_lambda_function\" \"sneaker_service\" {\n  function_name = \"sneakerService\"\n  handler       = \"sneakerService.handler\"\n  runtime       = \"nodejs12.x\"\n  role          = aws_iam_role.lambda_exec.arn\n  filename      = \"sneakerService.zip\"\n}\n\nresource \"aws_lambda_function\" \"order_service\" {\n  function_name = \"orderService\"\n  handler       = \"orderService.handler\"\n  runtime       = \"nodejs12.x\"\n  role          = aws_iam_role.lambda_exec.arn\n  filename      = \"orderService.zip\"\n}\n\nresource \"aws_lambda_function\" \"notification_service\" {\n  function_name = \"notificationService\"\n  handler       = \"notificationService.handler\"\n  runtime       = \"nodejs12.x\"\n  role          = aws_iam_role.lambda_exec.arn\n  filename      = \"notificationService.zip\"\n}\n\nresource \"aws_iam_role\" \"lambda_exec\" {\n  name = \"lambda_exec_role\"\n  \n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Principal = {\n          Service = \"lambda.amazonaws.com\"\n        }\n        Effect = \"Allow\"\n      },\n    ]\n  })\n}\n\nresource \"aws_iam_role_policy_attachment\" \"lambda_exec_policy\" {\n  role       = aws_iam_role.lambda_exec.name\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n}"
}